//@flow
/* eslint-disable */
type Method = ['account.updateProfile']
type MethodApi = 'account.updateProfile'
const methodApi: MethodApi = 'account.updateProfile'
declare function Api(query: Method): void
declare function Api(list: string[] | string): (obj: Object) => ({
  val: Object,
  ln: number
})

/*const api: typeof Api = (list) => {
  const str0 = list[0]
  if (str0 === 'account.updateProfile') {
    return void 0
  } else {
    return (obj: Object) => ({ val: obj, ln: list.length })
  }
}
type Account = {
  name: string,
  username: string,
  age: number
}


const res = api`auth.checkPassword`({
  password_hash: [0, 2, 1]
})


const res1 = api`
auth.checkPassword
  password_hash: ${[0, 2, 1]}
`


const profileUpdater = api`
account.updateProfile
  first_name ${(user: Account) => user.name}
  about      ${({ age }: Account) => `Age: ${age}`}
`
profileUpdater({
  name: 'lambda',
  age : 5
})*/

const backtick = (val: *) => val

const result: (string|MethodApi)[] = backtick`${methodApi}`

import { MTError, RpcError } from '../error'
import { NetMessage } from '../service/networker/net-message'

import { type Maybe } from 'flow-static-land/src/Maybe'
import * as maybe from 'flow-static-land/src/Maybe'

import { type Either } from 'flow-static-land/src/Either'
import * as either from 'flow-static-land/src/Either'

import { composeKleisli } from 'flow-static-land/src/Chain'


import { type PLens } from 'flow-static-land/src/PLens'
import * as lens from 'flow-static-land/src/PLens'

import { type Pure } from 'flow-static-land/src/Eff'
import * as eff from 'flow-static-land/src/Eff'

import { type Getter } from 'flow-static-land/src/Getter'
import * as getter from 'flow-static-land/src/Getter'

const netMessageMaybe = (netMessage: NetMessage) => maybe.of(netMessage)

const RequestIDLens: PLens<NetMessage, NetMessage, Maybe<string>, string> = {
  get(netMessage: NetMessage) {
    return netMessage.requestID
      ? maybe.of(netMessage.requestID)
      : maybe.Nothing
  },
  set(b: string, netMessage: NetMessage) {
    netMessage.requestID = b
    return netMessage
  }
}

type Reject = (rs: RpcError) => void

const encaseRequestID = (maybeString: Maybe<string>) => composeKleisli(maybeString)

const RejectGetter: Getter<NetMessage, Reject> = {
  get(netMessage: NetMessage) {
    return netMessage.deferred.reject
  },
}

const onAuthKeyUnreg = (netMessage: NetMessage) => {
  const requestID = RequestIDLens.get(netMessage)

}


export default netMessageMaybe

