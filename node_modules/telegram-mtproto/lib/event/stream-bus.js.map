{"version":3,"sources":["../../src/event/stream-bus.js"],"names":["log","console","e","value","isAPI","error","code","type","setTimeout","rs","dc","req","apiReq","createStreamBus","ctx","emitter","rootEmitter","uid","bus","makeStreamMap","baseState","onValue","responseRaw","onError","incomingMessage","state","observe","val","networker","threads","get","threadID","message","_","dcID","newNetworker","set","messageIn","apiOnly","filter","mtOnly","messages","msg_id","data","sentMessage","deferred","resolve","result","delete","requestID","requests","defer","rpcResult","rpcError","isAuthRestart","newDc","has","req_msg_id","reject","msg","options","api","invokeNetRequest","storage","authKey","saltKey","networkerDC","remove","doAuth","reqId","thread","authBegin","nearest","netMessage","netReq","fromStore","defaultDC","Promise","newRequest","map","awaitPromises","messageID","applyServerSalt","server_salt","ackMessage","processMessageAck","first_msg_id","repeatRequest","values","debounce","mergeConcurrently","newSession","untypedMessage","noAuth","an","pushMessageCast","responseRawCast","incomingMessageCast","newNetworkerCast","rpcResultCast","untypedMessageCast","netMessageCast","newRequestCast","messageInCast","newSessionCast","baseCast","noAuthCast","getter","pushMessage","changeRpcError","streamMap","toProperty","raw","changed"],"mappings":"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","file":"stream-bus.js","sourcesContent":["//@flow\n\nimport type { EventEmitterType } from 'eventemitter2'\n// import { taggedSum } from 'daggy'\nimport { from, of } from 'most'\n\nimport Config from '../config-provider'\nimport { makeEventStream } from './make-event-stream'\n\nimport type { MTProto } from '../service/main'\nimport type { RpcRawError } from './rpc'\nimport {\n  onRpcError,\n  isMigrateError,\n  getMigrateDc,\n  isFileMigrateError,\n  getFileMigrateDc\n} from './rpc'\nimport ApiRequest from '../service/main/request'\nimport Request from '../service/api-manager/request'\nimport NetworkerThread from '../service/networker'\nimport { NetMessage } from '../service/networker/net-message'\nimport { MTError, RpcError } from '../error'\nimport dcStoreKeys from '../util/dc-store-keys'\n// import { EventScope } from './scoped-emitter'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`stream-bus`\n\n/*\nconst makeStateScopes = (uid: string) => {\n  const uidScope = EventScope.of(uid)\n  const stateScope = EventScope.of('state')\n  const messagesScope = EventScope.of('messages')\n  const requestsScope = EventScope.of('requests')\n  const stateMessages = stateScope.concat(messagesScope)\n  const stateRequests = stateScope.concat(requestsScope)\n  const fullScope = {\n    requests: uidScope.concat(stateRequests).joined,\n    messages: uidScope.concat(stateMessages).joined,\n  }\n\n  return fullScope\n}*/\n\ntype BaseType =\n  'INIT'\n  | 'AUTH'\n  | 'WORK'\n\nconst createStreamBus = (ctx: MTProto) => {\n  const emitter = Config.rootEmitter(ctx.uid)\n  const bus = makeStreamMap(emitter)\n\n  // const baseState = fromEvents(\n  //   ctx.emitter,\n  //   [ctx.uid, 'base'].join('.'),\n  //   (str: BaseType) => str\n  // ).toProperty((): BaseType => 'INIT')\n  bus.baseState.onValue(log`base state`)\n  bus.baseState.onValue(e => console.log(e))\n  // const stateScopes = makeStateScopes(ctx.uid)\n\n  // bus.scopes = {\n  //   messages: fromEvents(ctx.emitter, stateScopes.messages),\n  //   requests: fromEvents(ctx.emitter, stateScopes.requests),\n  // }\n\n  // pushMessage.onValue(log('push message'))\n\n  bus.responseRaw.onValue(log('raw response'))\n  bus.responseRaw.onError(log('raw error'))\n\n  bus.incomingMessage.onValue(log('incoming message'))\n\n  const state = ctx.state\n\n  bus.incomingMessage.observe({\n    value(val) {\n      // ctx.state.messages.delete(val.message.msg_id)\n      const networker = state.threads.get(val.threadID)\n      if (networker == null) return\n      log('observer', 'type')(val.message._, networker.dcID)\n    }\n  })\n\n  bus.newNetworker.observe((networker) => {\n    log('new networker')(networker)\n    state.threads.set(networker.threadID, networker)\n  })\n\n  bus.messageIn.onValue(log('message in'))\n\n  const apiOnly = bus.messageIn.filter(value => value.isAPI)\n  const mtOnly = bus.messageIn.filter(value => !value.isAPI)\n\n  apiOnly.observe({\n    value(val) {\n      ctx.state.messages.set(val.msg_id, val)\n\n    }\n  })\n  mtOnly.observe({\n    value(val) {\n      ctx.state.messages.set(val.msg_id, val)\n\n    }\n  })\n\n  bus.rpcResult.observe(async (data: OnRpcResult) => {\n    log('rpc result')(data)\n    data.sentMessage.deferred.resolve(data.result)\n    ctx.state.messages.delete(data.sentMessage.msg_id)\n    const requestID = data.sentMessage.requestID\n    if (typeof requestID !== 'string') return\n    const req = ctx.state.requests.get(requestID)\n    if (!req) {\n      // data.sentMessage.deferred.reject('No such request!')\n      return log('on rpc result error')('req', req)\n    }\n    req.defer.resolve(data.result)\n    ctx.state.requests.delete(requestID)\n  })\n\n  bus.rpcError.onValue(log('rpc error'))\n\n  const isAuthRestart = (error: MTError) =>\n    error.code === 500 &&\n    error.type === 'AUTH_RESTART'\n\n  bus.rpcError.observe(async ({ error, ...data }: OnRpcError) => {\n    if (isFileMigrateError(error)) {\n      const newDc = getFileMigrateDc(error)\n      if (typeof newDc !== 'number') throw error\n      if (!ctx.state.messages.has(data.message.req_msg_id)) {\n        data.sentMessage.deferred.reject(error)\n        return log('on file migrate error')(data.message.req_msg_id, 'req_msg_id not found')\n      }\n      const msg = ctx.state.messages.get(data.message.req_msg_id)\n      if (!msg || !msg.requestID || typeof msg.requestID !== 'string') {\n        data.sentMessage.deferred.reject(error)\n        return log('on file migrate error')('msg', msg)\n      }\n      const req = ctx.state.requests.get(msg.requestID)\n      if (!req) {\n        data.sentMessage.deferred.reject(error)\n        return log('on file migrate error')('req', req)\n      }\n      req.options.dc = newDc\n      log('file migrate', 'req')(req)\n      log('on file migrate restart')('before end')\n      await ctx.api.invokeNetRequest(req)\n    } if (isMigrateError(error)) {\n      const newDc = getMigrateDc(error)\n      if (typeof newDc !== 'number') throw error\n      await ctx.storage.set('dc', newDc)\n      if (!ctx.state.messages.has(data.message.req_msg_id)) {\n        data.sentMessage.deferred.reject(error)\n        return log('on migrate error')(data.message.req_msg_id, 'req_msg_id not found')\n      }\n      const msg = ctx.state.messages.get(data.message.req_msg_id)\n      if (!msg || !msg.requestID || typeof msg.requestID !== 'string') {\n        data.sentMessage.deferred.reject(error)\n        return log('on migrate error')('msg', msg)\n      }\n      const req = ctx.state.requests.get(msg.requestID)\n      if (!req) {\n        data.sentMessage.deferred.reject(error)\n        return log('on migrate error')('req', req)\n      }\n      req.options.dc = newDc\n      log('migrate', 'req')(req)\n      log('on migrate restart')('before end')\n      await ctx.api.invokeNetRequest(req)\n    } else if (isAuthRestart(error)) {\n      if (!ctx.state.messages.has(data.message.req_msg_id)) {\n        data.sentMessage.deferred.reject(error)\n        return log('error', 'auth restart')(data.message.req_msg_id, 'req_msg_id not found')\n      }\n      const msg = ctx.state.messages.get(data.message.req_msg_id)\n      if (!msg || !msg.requestID) {\n        data.sentMessage.deferred.reject(error)\n        return log('error', 'auth restart')('no requestID msg', msg)\n      }\n      const req = ctx.state.requests.get(msg.requestID)\n      if (!req) {\n        data.sentMessage.deferred.reject(error)\n        return log('error', 'on auth restart')('no request info', msg)\n      }\n      const { authKey, saltKey } = dcStoreKeys(data.networkerDC)\n      log('on auth restart')(authKey, saltKey)\n      await ctx.storage.remove(authKey, saltKey)\n      log('on auth restart')('before end')\n      await ctx.api.doAuth()\n      await ctx.api.invokeNetRequest(req)\n    } else if (error.code === 401) {\n\n      log('rpc', 'auth key unreg')(data.sentMessage)\n      const reqId = data.sentMessage.requestID\n      if (!reqId) {\n        data.sentMessage.deferred.reject(error)\n        return log('error', 'auth key unreg')('no requestID msg', data.sentMessage)\n      }\n      const dc = data.sentMessage.dc\n      const req = ctx.state.requests.get(reqId)\n      if (!req || !dc) {\n        data.sentMessage.deferred.reject(error)\n        return log('error', 'on auth key unreg')('no request info', dc, reqId)\n      }\n\n      // const { authKey, saltKey } = dcStoreKeys(dc)\n      // await ctx.storage.remove(authKey)\n      const thread = ctx.state.threads.get(data.threadID)\n      if (!thread) {\n        data.sentMessage.deferred.reject(error)\n        return log('error', 'on auth key unreg')('no thread', dc, data.threadID)\n      }\n      // thread.connectionInited = false\n      ctx.api.authBegin = false\n      log('on auth key unreg')('before end')\n      const nearest = await ctx.storage.get('nearest_dc')\n      await ctx.storage.set('dc', nearest)\n      // await new Promise(rs => setTimeout(rs, 1e3))\n      req.options.dc = nearest\n      await ctx.api.doAuth()\n      await ctx.api.invokeNetRequest(req)\n    } else {\n      log('rpc', 'unhandled')(data)\n      data.sentMessage.deferred.reject(error)\n    }\n  })\n\n  bus.netMessage.onValue((message) => {\n    log('net message')(message)\n    const req = ctx.state.messages.get(message.msg_id)\n    log('req')(req)\n  })\n\n  bus.netMessage.onValue(log('new request'))\n\n  bus.newRequest.observe(async (netReq) => {\n    if (state.requests.has(netReq.requestID)) return log('request', 'repeat')(netReq)\n    ctx.state.requests.set(netReq.requestID, netReq)\n    let dc = netReq.options.dc\n    if (!dc || dc === '@@home') {\n      const fromStore = await ctx.storage.get('dc')\n      dc = fromStore\n        ? +fromStore\n        : ctx.defaultDC\n    }\n    netReq.options.dc = dc\n\n    log`request, new`(netReq)\n    await new Promise(rs => setTimeout(rs, 100))\n    ctx.api.invokeNetRequest(netReq)\n  })\n\n  bus.newSession.observe(async ({\n    threadID,\n    networkerDC,\n    message,\n    messageID\n  }) => {\n    const thread = ctx.state.threads.get(threadID)\n    if (!thread) {\n      log`new session, error, no thread`(threadID, messageID)\n      return\n    }\n    await thread.applyServerSalt(message.server_salt)\n    thread.ackMessage(messageID)\n    thread.processMessageAck(message.first_msg_id)\n\n    log`new session, handled`(messageID, networkerDC)\n\n    const repeatRequest =\n      (req: ApiRequest) =>\n        of(req)\n          .map(ctx.api.invokeNetRequest)\n          .awaitPromises()\n\n    await from(ctx.state.requests.values())\n      .debounce(100)\n      .map(repeatRequest)\n      .mergeConcurrently(1)\n      .observe(log`recurring requests`)\n  })\n\n  bus.untypedMessage.observe(log`untyped`)\n\n  bus.noAuth.observe(async ({\n    dc,\n    req,\n    apiReq,\n    error\n  }: NoAuth) => {\n    // const mainDc  = await ctx.storage.get('dc')\n    // if (dc === mainDc) {\n\n    // } else {\n\n    // }\n  })\n\n  return bus\n}\n\n\nconst an: any = {}\n\nconst pushMessageCast    : PushMessageEvent = an\nconst responseRawCast    : RawEvent<Object> = an\nconst incomingMessageCast: IncomingMessageEvent = an\nconst newNetworkerCast   : NetworkerThread = an\nconst rpcResultCast      : OnRpcResult = an\nconst untypedMessageCast : OnUntypedMessage = an\n\nconst netMessageCast     : MtpCall = an\nconst newRequestCast     : ApiRequest = an\nconst messageInCast      : NetMessage = an\nconst newSessionCast     : OnNewSession = an\nconst baseCast           : BaseType = an\nconst noAuthCast         : NoAuth = an\n\nfunction makeStreamMap(emitter: EventEmitterType) {\n  const getter = makeEventStream(emitter)\n\n\n  const pushMessage     = getter('push-message', pushMessageCast)\n  const responseRaw     = getter('response-raw', responseRawCast)\n  const incomingMessage = getter('incoming-message', incomingMessageCast)\n  const newNetworker    = getter('new-networker', newNetworkerCast)\n  const rpcError        = getter('rpc-error', changeRpcError)\n  const rpcResult       = getter('rpc-result', rpcResultCast)\n  const untypedMessage  = getter('untyped-message', untypedMessageCast)\n  const netMessage      = getter('net-message', netMessageCast)\n  const newRequest      = getter('new-request', newRequestCast)\n  const messageIn       = getter('message-in', messageInCast)\n  const newSession      = getter('new-session', newSessionCast)\n  const baseState       = getter('base', baseCast)\n  const noAuth          = getter('no-auth', noAuthCast)\n\n  const streamMap = {\n    pushMessage,\n    responseRaw,\n    incomingMessage,\n    newNetworker,\n    rpcError,\n    untypedMessage,\n    netMessage,\n    newRequest,\n    messageIn,\n    rpcResult,\n    newSession,\n    noAuth,\n    baseState: baseState.toProperty((): BaseType => 'INIT' )\n  }\n\n  return streamMap\n}\n\ntype OnRpcResult = {\n  threadID: string,\n  networkerDC: number,\n  message: { _: string, req_msg_id: string, [key: string]: any },\n  sentMessage: NetMessage,\n  result: Object\n}\n\n\ntype OnRpcErrorRaw = {\n  threadID: string,\n  networkerDC: number,\n  error: RpcRawError,\n  sentMessage: NetMessage,\n  message: { _: string, req_msg_id: string, [key: string]: any }\n}\n\ntype OnRpcError = {\n  threadID: string,\n  networkerDC: number,\n  error: RpcError,\n  sentMessage: NetMessage,\n  message: { _: string, req_msg_id: string, [key: string]: any }\n}\n\ntype OnNewSession = {\n  threadID: string,\n  networkerDC: number,\n  message: {\n    _: string,\n    req_msg_id: string,\n    [key: string]: any\n  },\n  messageID: string\n}\n\ntype OnUntypedMessage = {\n  threadID: string,\n  networkerDC: number,\n  message: {\n    _: string,\n    req_msg_id: string,\n    [key: string]: any\n  },\n  messageID: string,\n  sessionID: Uint8Array,\n  result: Object,\n}\n\nfunction changeRpcError({ error, ...raw }: OnRpcErrorRaw): OnRpcError {\n  const changed = onRpcError(error)\n  const result = { ...raw, error: changed }\n  return result\n}\n\n/*type ApiCall = {\n  type: 'api-call',\n  msg_id: string,\n  method: string,\n  params: Object,\n  options: {\n    messageID?: string,\n    dcID?: number\n  }\n}*/\n\ntype MtpCall = {\n  type: 'mtp-call',\n  msg_id: string,\n  method: string,\n  params: Object,\n  options: Object\n}\n\ntype PushMessageEvent = {\n  threadID: string,\n  message: NetMessage\n}\n\ntype IncomingMessageEvent = {\n  threadID: string,\n  message: Object,\n  messageID: string,\n  sessionID: Uint8Array\n}\n\ntype RawEvent<T> = {\n  data: T,\n  status: number,\n  statusText: string\n}\n\ntype NoAuth = {\n  dc: number,\n  req: Request,\n  apiReq: ApiRequest,\n  error: MTError,\n}\n\n\n\n\nexport default createStreamBus\n"]}