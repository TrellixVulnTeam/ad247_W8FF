'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _error = require('../error');

var _netMessage = require('../service/networker/net-message');

var _Maybe = require('flow-static-land/src/Maybe');

var maybe = _interopRequireWildcard(_Maybe);

var _Either = require('flow-static-land/src/Either');

var either = _interopRequireWildcard(_Either);

var _Chain = require('flow-static-land/src/Chain');

var _PLens = require('flow-static-land/src/PLens');

var lens = _interopRequireWildcard(_PLens);

var _Eff = require('flow-static-land/src/Eff');

var eff = _interopRequireWildcard(_Eff);

var _Getter = require('flow-static-land/src/Getter');

var getter = _interopRequireWildcard(_Getter);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/* eslint-disable */
var methodApi = 'account.updateProfile';


/*const api: typeof Api = (list) => {
  const str0 = list[0]
  if (str0 === 'account.updateProfile') {
    return void 0
  } else {
    return (obj: Object) => ({ val: obj, ln: list.length })
  }
}
type Account = {
  name: string,
  username: string,
  age: number
}


const res = api`auth.checkPassword`({
  password_hash: [0, 2, 1]
})


const res1 = api`
auth.checkPassword
  password_hash: ${[0, 2, 1]}
`


const profileUpdater = api`
account.updateProfile
  first_name ${(user: Account) => user.name}
  about      ${({ age }: Account) => `Age: ${age}`}
`
profileUpdater({
  name: 'lambda',
  age : 5
})*/

var backtick = val => val;

var result = backtick`${methodApi}`;

var netMessageMaybe = netMessage => maybe.of(netMessage);

var RequestIDLens = {
  get(netMessage) {
    return netMessage.requestID ? maybe.of(netMessage.requestID) : maybe.Nothing;
  },
  set(b, netMessage) {
    netMessage.requestID = b;
    return netMessage;
  }
};

var encaseRequestID = maybeString => (0, _Chain.composeKleisli)(maybeString);

var RejectGetter = {
  get(netMessage) {
    return netMessage.deferred.reject;
  }
};

var onAuthKeyUnreg = netMessage => {
  var requestID = RequestIDLens.get(netMessage);
};

exports.default = netMessageMaybe;
//# sourceMappingURL=monadic.js.map