{"version":3,"sources":["../../src/event/make-event-stream.js"],"names":["makeEventStream","cast","obj","emitter","name","casted","casts","eventName","Array","isArray","join","eventStream"],"mappings":";;;;;QAUgBA,e,GAAAA,e;;AARhB;;AAGA,IAAMC,OAAaC,GAAD,IAASA,GAA3B;;AAKO,SAASF,eAAT,CAAyBG,OAAzB,EAAoD;AACzD,SAAO,UACLC,IADK,EAELC,MAFK,EAEa;AAClB,QAAMC,QAA2BL,IAAjC;AACA,QAAMM,YAAYC,MAAMC,OAAN,CAAcL,IAAd,IACdA,KAAKM,IAAL,CAAU,GAAV,CADc,GAEdN,IAFJ;AAGA,QAAIO,oBAAJ;AACA,QAAI,OAAON,MAAP,KAAkB,UAAtB,EAAkC;AAChCM,oBAAc,uBAAWR,OAAX,EAAoBI,SAApB,EAA+BF,MAA/B,CAAd;AACD,KAFD,MAEO;AACLM,oBAAc,uBAAWR,OAAX,EAAoBI,SAApB,EAA+BD,KAA/B,CAAd;AACD;AACD,WAAOK,WAAP;AACD,GAdD;AAeD","file":"make-event-stream.js","sourcesContent":["//@flow\n\nimport { fromEvents } from 'kefir'\nimport type { EventEmitterType } from 'eventemitter2'\n\nconst cast: any = (obj) => obj\ninterface CastFn <V>{\n  (obj: V): V\n}\n\nexport function makeEventStream(emitter: EventEmitterType) {\n  return function<CastType>(\n    name: string[] | string,\n    casted: CastType) {\n    const casts: CastFn<CastType> = (cast: any)\n    const eventName = Array.isArray(name)\n      ? name.join('.')\n      : name\n    let eventStream\n    if (typeof casted === 'function') {\n      eventStream = fromEvents(emitter, eventName, casted)\n    } else {\n      eventStream = fromEvents(emitter, eventName, casts)\n    }\n    return eventStream\n  }\n}\n"]}