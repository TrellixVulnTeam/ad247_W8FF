{"version":3,"sources":["../../src/event/monadic.js"],"names":["maybe","either","lens","eff","getter","methodApi","backtick","val","result","netMessageMaybe","netMessage","of","RequestIDLens","get","requestID","Nothing","set","b","encaseRequestID","maybeString","RejectGetter","deferred","reject","onAuthKeyUnreg"],"mappings":";;;;;;AAmDA;;AACA;;AAEA;;IACYA,K;;AAEZ;;IACYC,M;;AAEZ;;AAGA;;IACYC,I;;AAEZ;;IACYC,G;;AAEZ;;IACYC,M;;;;AArEZ;AAGA,IAAMC,YAAuB,uBAA7B;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,IAAMC,WAAYC,GAAD,IAAYA,GAA7B;;AAEA,IAAMC,SAA+BF,QAAS,GAAED,SAAU,EAA1D;;AAuBA,IAAMI,kBAAmBC,UAAD,IAA4BV,MAAMW,EAAN,CAASD,UAAT,CAApD;;AAEA,IAAME,gBAAsE;AAC1EC,MAAIH,UAAJ,EAA4B;AAC1B,WAAOA,WAAWI,SAAX,GACHd,MAAMW,EAAN,CAASD,WAAWI,SAApB,CADG,GAEHd,MAAMe,OAFV;AAGD,GALyE;AAM1EC,MAAIC,CAAJ,EAAeP,UAAf,EAAuC;AACrCA,eAAWI,SAAX,GAAuBG,CAAvB;AACA,WAAOP,UAAP;AACD;AATyE,CAA5E;;AAcA,IAAMQ,kBAAmBC,WAAD,IAAgC,2BAAeA,WAAf,CAAxD;;AAEA,IAAMC,eAA2C;AAC/CP,MAAIH,UAAJ,EAA4B;AAC1B,WAAOA,WAAWW,QAAX,CAAoBC,MAA3B;AACD;AAH8C,CAAjD;;AAMA,IAAMC,iBAAkBb,UAAD,IAA4B;AACjD,MAAMI,YAAYF,cAAcC,GAAd,CAAkBH,UAAlB,CAAlB;AAED,CAHD;;kBAMeD,e","file":"monadic.js","sourcesContent":["//@flow\n/* eslint-disable */\ntype Method = ['account.updateProfile']\ntype MethodApi = 'account.updateProfile'\nconst methodApi: MethodApi = 'account.updateProfile'\ndeclare function Api(query: Method): void\ndeclare function Api(list: string[] | string): (obj: Object) => ({\n  val: Object,\n  ln: number\n})\n\n/*const api: typeof Api = (list) => {\n  const str0 = list[0]\n  if (str0 === 'account.updateProfile') {\n    return void 0\n  } else {\n    return (obj: Object) => ({ val: obj, ln: list.length })\n  }\n}\ntype Account = {\n  name: string,\n  username: string,\n  age: number\n}\n\n\nconst res = api`auth.checkPassword`({\n  password_hash: [0, 2, 1]\n})\n\n\nconst res1 = api`\nauth.checkPassword\n  password_hash: ${[0, 2, 1]}\n`\n\n\nconst profileUpdater = api`\naccount.updateProfile\n  first_name ${(user: Account) => user.name}\n  about      ${({ age }: Account) => `Age: ${age}`}\n`\nprofileUpdater({\n  name: 'lambda',\n  age : 5\n})*/\n\nconst backtick = (val: *) => val\n\nconst result: (string|MethodApi)[] = backtick`${methodApi}`\n\nimport { MTError, RpcError } from '../error'\nimport { NetMessage } from '../service/networker/net-message'\n\nimport { type Maybe } from 'flow-static-land/src/Maybe'\nimport * as maybe from 'flow-static-land/src/Maybe'\n\nimport { type Either } from 'flow-static-land/src/Either'\nimport * as either from 'flow-static-land/src/Either'\n\nimport { composeKleisli } from 'flow-static-land/src/Chain'\n\n\nimport { type PLens } from 'flow-static-land/src/PLens'\nimport * as lens from 'flow-static-land/src/PLens'\n\nimport { type Pure } from 'flow-static-land/src/Eff'\nimport * as eff from 'flow-static-land/src/Eff'\n\nimport { type Getter } from 'flow-static-land/src/Getter'\nimport * as getter from 'flow-static-land/src/Getter'\n\nconst netMessageMaybe = (netMessage: NetMessage) => maybe.of(netMessage)\n\nconst RequestIDLens: PLens<NetMessage, NetMessage, Maybe<string>, string> = {\n  get(netMessage: NetMessage) {\n    return netMessage.requestID\n      ? maybe.of(netMessage.requestID)\n      : maybe.Nothing\n  },\n  set(b: string, netMessage: NetMessage) {\n    netMessage.requestID = b\n    return netMessage\n  }\n}\n\ntype Reject = (rs: RpcError) => void\n\nconst encaseRequestID = (maybeString: Maybe<string>) => composeKleisli(maybeString)\n\nconst RejectGetter: Getter<NetMessage, Reject> = {\n  get(netMessage: NetMessage) {\n    return netMessage.deferred.reject\n  },\n}\n\nconst onAuthKeyUnreg = (netMessage: NetMessage) => {\n  const requestID = RequestIDLens.get(netMessage)\n\n}\n\n\nexport default netMessageMaybe\n\n"]}