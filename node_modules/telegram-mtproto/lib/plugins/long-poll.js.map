{"version":3,"sources":["../../src/plugins/long-poll.js"],"names":["LongPoll","constructor","thread","maxWait","pendingTime","Date","now","requestTime","isActive","setPendingTime","request","result","wrapMtpCall","max_delay","wait_after","max_wait","noResponse","longPoll","checkLongPoll","writePollTime","allowLongPoll","sendLongPool","resolve"],"mappings":";;;;;;AAEA;;;;AAEA;;AACA;;;;;;AAEA;AACA;;AAEA;;AAEA,MAAMA,QAAN,CAAe;;AAQbC,cAAYC,MAAZ,EAAqC;AAAA,SALrCC,OAKqC,GAL3B,IAK2B;AAAA,SAJrCC,WAIqC,GAJvBC,KAAKC,GAAL,EAIuB;AAAA,SAHrCC,WAGqC,GAHvBF,KAAKC,GAAL,EAGuB;AAAA,SAFrCE,QAEqC,GAF1B,IAE0B;;AACnC,SAAKN,MAAL,GAAcA,MAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDO,mBAAiB;AACf,QAAMH,MAAM,yBAAZ;AACA,SAAKC,WAAL,GAAmBD,GAAnB;AACA,SAAKF,WAAL,GAAmBE,MAAM,KAAKH,OAA9B;AACD;AACKO,SAAN,GAAgB;AAAA;;AAAA;AACd,UAAMC,SAAS,MAAM,MAAKT,MAAL,CAAYU,WAAZ,CAAwB,WAAxB,EAAqC;AACxDC,mBAAY,IAD4C;AAExDC,oBAAY,GAF4C;AAGxDC,kBAAY,MAAKZ;AAHuC,OAArC,EAIlB;AACDa,oBAAY,IADX;AAEDC,kBAAY;AAFX,OAJkB,CAArB;AASA,YAAKf,MAAL,CAAYgB,aAAZ;AACA,aAAOP,MAAP;AAXc;AAYf;;AAEDQ,kBAAgB;AACd,SAAKZ,WAAL,GAAmB,yBAAnB;AACD;;AAEDa,kBAAgB;AACd,WAAO,KAAKb,WAAL,GAAmB,IAAnB,GAA0B,yBAAjC;AACD;;AAEDc,iBAA6B;AAC3B;AACA,QAAI,CAAC,KAAKb,QAAV,EAAoB,OAAO,mBAASc,OAAT,CAAiB,KAAjB,CAAP;AACpB,QAAI,CAAC,KAAKF,aAAL,EAAL,EAA2B,OAAO,mBAASE,OAAT,CAAiB,KAAjB,CAAP;AAC3B,SAAKb,cAAL;AACA,WAAO,KAAKC,OAAL,EAAP;AACD;AAnDY;;kBAsDAV,Q","file":"long-poll.js","sourcesContent":["//@flow\n\nimport Bluebird from 'bluebird'\n\nimport { tsNow } from '../service/time-manager'\nimport { NetworkerThread } from '../service/networker/index'\n\n// import Logger from 'mtproto-logger'\n// const log = Logger`long-poll`\n\n// let inited = false\n\nclass LongPoll {\n  thread: NetworkerThread\n\n  maxWait = 25e3\n  pendingTime = Date.now()\n  requestTime = Date.now()\n  isActive = true\n\n  constructor(thread: NetworkerThread) {\n    this.thread = thread\n    // if (inited) {\n    //   log('Networker')(thread)\n    //   //$ FlowIssue\n    //   this.request = () => Bluebird.resolve()\n    // }\n    // inited = true\n  }\n\n  setPendingTime() {\n    const now = tsNow()\n    this.requestTime = now\n    this.pendingTime = now + this.maxWait\n  }\n  async request() {\n    const result = await this.thread.wrapMtpCall('http_wait', {\n      max_delay : 1000,\n      wait_after: 500,\n      max_wait  : this.maxWait\n    }, {\n      noResponse: true,\n      longPoll  : true,\n      // notContentRelated: true\n    })\n    this.thread.checkLongPoll()\n    return result\n  }\n\n  writePollTime() {\n    this.requestTime = tsNow()\n  }\n\n  allowLongPoll() {\n    return this.requestTime + 3500 < tsNow()\n  }\n\n  sendLongPool(): Promise<any> {\n    //TODO add base dc check\n    if (!this.isActive) return Bluebird.resolve(false)\n    if (!this.allowLongPoll()) return Bluebird.resolve(false)\n    this.setPendingTime()\n    return this.request()\n  }\n}\n\nexport default LongPoll\n"]}