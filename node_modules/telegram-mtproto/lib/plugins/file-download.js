'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var CHUNK_SIZE = 10240;

var downloadFilePart = (location, chunkNum = 0, telegram) => {
  var args = {
    location,
    offset: CHUNK_SIZE * chunkNum,
    limit: CHUNK_SIZE
  };
  return telegram('upload.getFile', args);
};

var getLocation = doc => ({
  _: 'inputVideoFileLocation',
  id: doc.id,
  access_hash: doc.access_hash
});

function* _ref2(doc, telegram) {
  var location = getLocation(doc);
  var parts = Math.ceil(doc.size / CHUNK_SIZE);
  var results = Array(parts);
  for (var i = 0; i < parts; i++) {
    var response = yield downloadFilePart(location, i, telegram);
    results[i] = response.bytes;
  }
  return new Uint8Array([...results]);
}

var downloadDocument = (() => {
  var _ref = _asyncToGenerator(_ref2);

  return function downloadDocument(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

exports.default = downloadDocument;
//# sourceMappingURL=file-download.js.map