{"version":3,"sources":["../../src/config-check/validator.js"],"names":["List","Array","empty","lst","of","constructor","length","Pair","$1","$2","map","f","new$2","ap","fs","concat","chain","that","x","users","id","hair","height","user","result","filter"],"mappings":";;;;;;;AA8BA;;AAEA;;AAEA,MAAMA,IAAN,SAAsBC,KAAtB,CAAkE;AAChE;AACA;AACA;AACA;AACA,SAAOC,KAAP,GAAoC;AAClC,QAAMC,MAAyC,EAA/C;AACA,WAAO,IAAIH,IAAJ,CAAS,CAAT,CAAP;AACD;AACD;AACA,SAAOI,EAAP,CAAUD,GAAV,EAAyB;AACvB,WAAO,IAAIH,IAAJ,CAASG,GAAT,CAAP;AACD;AACDE,cAAYF,GAAZ,EAAoC;AAClC,QAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,IAAIG,MAAJ,KAAe,CAA9C,EAAiD;AAC/C,YAAMH,GAAN;AACD,KAFD,MAEO;AACL,YAAM,GAAGA,GAAT;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCgE;;AAhClE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAqEA,MAAMI,IAAN,CAAyD;AAGvDF,cAAYG,EAAZ,EAAmBC,EAAnB,EAA0B;AACxB,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,EAAL,GAAUA,EAAV;AACD;AACDC,MAAOC,CAAP,EAA2C;AACzC,QAAMC,QAAQD,EAAE,KAAKF,EAAP,CAAd;AACA,WAAO,IAAIF,IAAJ,CAAS,KAAKC,EAAd,EAAkBI,KAAlB,CAAP;AACD;AACDC,KAAMC,EAAN,EAAyD;AACvD,QAAMF,QAAQE,GAAGL,EAAH,CAAM,KAAKA,EAAX,CAAd;AACA,WAAO,IAAIF,IAAJ,CAASO,GAAGN,EAAH,CAAMO,MAAN,CAAa,KAAKP,EAAlB,CAAT,EAAgCI,KAAhC,CAAP;AACD;AACDI,QAASL,CAAT,EAA4D;AAC1D,QAAMM,OAAyBN,EAAE,KAAKF,EAAP,CAA/B;;AAEA,WAAO,IAAIF,IAAJ,CAAS,KAAKC,EAAL,CAAQO,MAAR,CAAeE,KAAKT,EAApB,CAAT,EACKS,KAAKR,EADV,CAAP;AAED;AACD,SAAOL,EAAP,CAAUc,CAAV,EAAiC;AAC/B,WAAO,IAAIX,IAAJ,CAASP,KAAKE,KAAL,EAAT,EAAuBgB,CAAvB,CAAP;AACD;AAvBsD;;AA0BzD,IAAMC,QAAqB,CACzB;AACEC,MAAI,CADN;AAEEC,QAAM,OAFR;AAGEC,UAAQ;AAHV,CADyB,EAKtB;AACDF,MAAI,CADH;AAEDC,QAAM,QAFL;AAGDC,UAAQ;AAHP,CALsB,EAStB;AACDF,MAAI,CADH;AAEDC,QAAM,QAFL;AAGDC,UAAQ;AAHP,CATsB,EAatB;AACDF,MAAI,CADH;AAEDC,QAAM,OAFL;AAGDC,UAAQ;AAHP,CAbsB,EAiBtB;AACDF,MAAI,CADH;AAEDC,QAAM,QAFL;AAGDC,UAAQ;AAHP,CAjBsB,CAA3B;;AA+BU;AAAA,SAAQC,KAAKF,IAAL,KAAc,QAAtB;AAAA;;AAOA;AAAA,SAAQE,KAAKD,MAAL,GAAc,GAAtB;AAAA;;AAdH,IAAME,0BACXjB,KACGH,EADH,CACMJ,KAAKI,EAAL,CAAQe,KAAR,CADN,EAEGH,KAFH,CAGIG,SAAS,IAAIZ,IAAJ,CACP,CAAC,aAAD,CADO,EAEPY,MAAMM,MAAN,MAFO,CAHb;;AAQA;AARA,CASGT,KATH,CAUIG,SAAS,IAAIZ,IAAJ,CACP,CAAC,MAAD,CADO,EAEPY,MAAMM,MAAN,OAFO,CAVb,CADK;;AAgBH;AACA;AACJ;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;kBAEelB,I","file":"validator.js","sourcesContent":["//@flow\n\n// import { tagged } from 'daggy'\n\n// const PairFunctor = tagged('PairFunctor', ['$1', '$2'])\n\n// // We just transform the second value!\n// // map :: PairFunctor a b ~> (b -> c) -> PairFunctor a c\n// PairFunctor.prototype.map = function(f) {\n//   return PairFunctor(this.$1, f(this.$2))\n// }\n\ninterface Semigroup<T> {\n  concat(obj: Semigroup<T>): $Subtype<Semigroup<T>>\n}\n\ninterface Monoid<T> extends Semigroup<T> {\n  static empty(): $Subtype<Monoid<T>>\n}\n\ninterface PairObj<E, A: $Subtype<Monoid<T>>, B> {\n  $1: A,\n  $2: B,\n  map<D>(f: (obj: B) => D): PairObj<E, A, D>,\n  ap<D>(fs: PairObj<E, A, (obj: B) => D>): PairObj<E, A, D>,\n  chain<D>(f: (obj: B) => PairObj<E, A, D>): PairObj<E, A, D>,\n  static of<D>(x: D): PairObj<E, A, D>,\n  // new ($1: A, $2: B): PairObj<E, A, B>,\n}\n\n// const daggyPair = tagged('Pair$', ['$1', '$2'])\n\n// const Pair = <E, T: Monoid<E>>(T$: Class<T>) =>\n\nclass List<T> extends Array<T> implements Monoid<T>, Semigroup<T> {\n  // lst: Array<T> & $Subtype<Semigroup<T>>\n  // constructor(lst: Array<T>) {\n  //   this.lst = lst\n  // }\n  static empty(): $Subtype<Monoid<T>> {\n    const lst: Array<T> & $Subtype<Semigroup<T>> = []\n    return new List(0)\n  }\n  // static get [Symbol.species]() { return List }\n  static of(lst: Array<T>) {\n    return new List(lst)\n  }\n  constructor(lst: Array<T> | number) {\n    if (typeof lst === 'number' || lst.length === 0) {\n      super(lst)\n    } else {\n      super(...lst)\n    }\n  }\n  // concat(list: $Subtype<Semigroup<T>>): $Subtype<Semigroup<T>> {\n  //   if (list instanceof List) {\n  //     const lst: $Subtype<Semigroup<T>> = new List(this.lst.concat(list.lst))\n  //     return lst\n  //   } else {\n  //     return list.concat(this.lst)\n  //   }\n  // }\n  // length(): number {\n  //   return this.lst.length\n  // }\n  // map<S>(fn: (obj: T) => S): List<S> {\n  //   return new List(this.lst.map(fn))\n  // }\n  // filter(fn: (obj: T) => boolean): List<T> {\n  //   return new List(this.lst.filter(fn))\n  // }\n}\n\ntype User = {\n  id: number,\n  hair: string,\n  height: number\n}\n\nclass Pair<E, T: List<E>, B> implements PairObj<E, T, B> {\n  $1: T\n  $2: B\n  constructor($1: T, $2: B) {\n    this.$1 = $1\n    this.$2 = $2\n  }\n  map<D>(f: (obj: B) => D): PairObj<E, T, D> {\n    const new$2 = f(this.$2)\n    return new Pair(this.$1, new$2)\n  }\n  ap<D>(fs: PairObj<E, T, (obj: B) => D>): PairObj<E, T, D>{\n    const new$2 = fs.$2(this.$2)\n    return new Pair(fs.$1.concat(this.$1), new$2)\n  }\n  chain<D>(f: (obj: B) => PairObj<E, T, D>): PairObj<E, T, D> {\n    const that: PairObj<E, T, D> = f(this.$2)\n\n    return new Pair(this.$1.concat(that.$1),\n                that.$2)\n  }\n  static of(x: B): PairObj<E, T, B>{\n    return new Pair(List.empty(), x)\n  }\n}\n\nconst users: Array<User> = [\n  {\n    id: 1,\n    hair: 'brown',\n    height: 185\n  }, {\n    id: 2,\n    hair: 'blonde',\n    height: 165\n  }, {\n    id: 3,\n    hair: 'blonde',\n    height: 181\n  }, {\n    id: 4,\n    hair: 'brown',\n    height: 175\n  }, {\n    id: 5,\n    hair: 'blonde',\n    height: 187\n  },\n]\n\nexport const result =\n  Pair\n    .of(List.of(users))\n    .chain(\n      users => new Pair(\n        ['Blonde hair'],\n        users.filter(\n          user => user.hair === 'blonde')))\n\n  // Keep only the users over 180cm tall\n    .chain(\n      users => new Pair(\n        ['Tall'],\n        users.filter(\n          user => user.height > 180)))\n\n    // Count the remaining users\n    // .map(users => users.length)\n/*{\n  const Pair$: Pair$Type = tagged('Pair$', ['$1', '$2'])\n\n  Pair$.prototype.map = function(f) {\n    return Pair$(this.$1, f(this.$2))\n  }\n\n  Pair$.prototype.ap = function(fs) {\n    return Pair$(fs.$1.concat(this.$1),\n                 fs.$2(this.$2))\n  }\n\n  Pair$.of = x => Pair$(T.empty(), x)\n\n  Pair$.prototype.chain = function(f) {\n    const that = f(this.$2)\n\n    return Pair$(this.$1.concat(that.$1),\n                 that.$2)\n  }\n\n  return Pair$\n}*/\n\n// const PairList = Pair(List)\n\nexport default Pair\n"]}