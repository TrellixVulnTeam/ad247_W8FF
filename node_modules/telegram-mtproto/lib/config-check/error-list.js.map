{"version":3,"sources":["../../src/config-check/error-list.js"],"names":["tuple","arr","ErrorSet","constructor","list","of","str","injected","empty","isEmpty","append","error","snoc","concat","y","cata","opts","Empty","List","ValidationPair","pair","obj","inj","first","fst","second","snd","map","f","a","chain","newPair","Validator","reduce"],"mappings":";;;;;;;AAKA;;IAAYA,K;;AACZ;;IAAYC,G;;AACZ;;;;AAaO,MAAMC,QAAN,CAAe;AAEpBC,cAAYC,IAAZ,EAA+B;AAC7B,SAAKA,IAAL,GAAYA,IAAZ;AACD;AACD,SAAOC,EAAP,CAAUC,GAAV,EAAuB;AACrB,QAAMC,WAAWN,IAAII,EAAJ,CAAOC,GAAP,CAAjB;AACA,WAAO,IAAIJ,QAAJ,CAAaK,QAAb,CAAP;AACD;AACD,SAAOC,KAAP,GAAe;AACb,QAAMD,WAAWN,IAAIO,KAAJ,EAAjB;AACA,WAAO,IAAIN,QAAJ,CAAaK,QAAb,CAAP;AACD;AACDE,YAAmB;AACjB,WAAOR,IAAIQ,OAAJ,CAAY,KAAKL,IAAjB,CAAP;AACD;AACDM,SAAOC,KAAP,EAAsB;AACpB,QAAMJ,WAAWN,IAAIW,IAAJ,CAAS,KAAKR,IAAd,EAAoBO,KAApB,CAAjB;AACA,WAAO,IAAIT,QAAJ,CAAaK,QAAb,CAAP;AACD;AACDM,SAAOC,CAAP,EAAoB;AAClB,QAAMP,WAAWN,IAAIY,MAAJ,CAAW,KAAKT,IAAhB,EAAsBU,EAAEV,IAAxB,CAAjB;AACA,WAAO,IAAIF,QAAJ,CAAaK,QAAb,CAAP;AACD;AACDQ,OAAaC,IAAb,EAA4C;AAC1C,QAAI,KAAKP,OAAL,EAAJ,EAAoB;AAClB,aAAOO,KAAKC,KAAL,CAAW,KAAKb,IAAhB,CAAP;AACD;AACD,WAAOY,KAAKE,IAAL,CAAU,KAAKd,IAAf,CAAP;AACD;AA7BmB;;QAATF,Q,GAAAA,Q;;AAlBb;AACA;;AAiDO,MAAMiB,cAAN,CAAqB;AAE1BhB,cAAYiB,IAAZ,EAA8B;AAC5B,SAAKA,IAAL,GAAYA,IAAZ;AACD;AACD,SAAOf,EAAP,CAAUgB,GAAV,EAAuBf,GAAvB,EAAoC;AAClC,QAAMc,OAAO,CAACC,GAAD,EAAMnB,SAASG,EAAT,CAAYC,GAAZ,CAAN,CAAb;AACA,QAAMC,WAAWP,MAAMsB,GAAN,CAAUF,IAAV,CAAjB;AACA,WAAO,IAAID,cAAJ,CAAmBZ,QAAnB,CAAP;AACD;AACD,SAAOC,KAAP,CAAaa,GAAb,EAA0B;AACxB,QAAMD,OAAO,CAACC,GAAD,EAAMnB,SAASM,KAAT,EAAN,CAAb;AACA,QAAMD,WAAWP,MAAMsB,GAAN,CAAUF,IAAV,CAAjB;AACA,WAAO,IAAID,cAAJ,CAAmBZ,QAAnB,CAAP;AACD;AACDgB,UAAgB;AACd,WAAOvB,MAAMwB,GAAN,CAAU,KAAKJ,IAAf,CAAP;AACD;AACDK,WAAmB;AACjB,WAAOzB,MAAM0B,GAAN,CAAU,KAAKN,IAAf,CAAP;AACD;AACDO,MAAIC,CAAJ,EAAkC;AAChC,QAAMrB,WAAWP,MAAM2B,GAAN,CAAUC,CAAV,EAAa,KAAKR,IAAlB,CAAjB;AACA,WAAO,IAAID,cAAJ,CAAmBZ,QAAnB,CAAP;AACD;AACDM,SAAOC,CAAP,EAA0B;AACxB,QAAMc,IAAKC,CAAD,IACR,KAAKJ,MAAL,GAAcZ,MAAd,CAAqBgB,CAArB,CADF;AAEA,WAAOf,EAAEa,GAAF,CAAMC,CAAN,CAAP;AACD;AACDE,QAAMF,CAAN,EAAwD;AACtD,QAAMG,UAAUH,EAAE,KAAKL,KAAL,EAAF,CAAhB;AACA,WAAO,KAAKV,MAAL,CAAYkB,OAAZ,CAAP;AACD;AAjCyB;;QAAfZ,c,GAAAA,c;AAoCN,MAAMa,SAAN,CAAgB;AAErB7B,cAAYC,IAAZ,EAA+B;AAC7B,SAAKA,IAAL,GAAYA,IAAZ;AACD;AACD,SAAOC,EAAP,CAAUD,IAAV,EAAgC;AAC9B,QAAMG,WAAWN,IAAIqB,GAAJ,CAAQlB,IAAR,CAAjB;AACA,WAAO,IAAI4B,SAAJ,CAAczB,QAAd,CAAP;AACD;AACD,SAAOC,KAAP,GAAe;AACb,WAAOwB,UAAU3B,EAAV,CAAa,EAAb,CAAP;AACD;AACDQ,SAAOC,CAAP,EAAqB;AACnB,QAAMP,WAAWN,IAAIY,MAAJ,CAAW,KAAKT,IAAhB,EAAsBU,EAAEV,IAAxB,CAAjB;AACA,WAAO,IAAI4B,SAAJ,CAAczB,QAAd,CAAP;AACD;AACD0B,SACEL,CADF,EAEER,IAFF,EAGkB;AAChB,WAAOnB,IAAIgC,MAAJ,CAAWL,CAAX,EAAcR,IAAd,EAAoB,KAAKhB,IAAzB,CAAP;AACD;AArBoB;QAAV4B,S,GAAAA,S","file":"error-list.js","sourcesContent":["//@flow\n\n// import type { Arr } from 'flow-static-land/src/Arr'\n// import type { Tuple, TupleV } from 'flow-static-land/src/Tuple'\n\nimport * as tuple from 'flow-static-land/lib/Tuple'\nimport * as arr from 'flow-static-land/lib/Arr'\nimport { isLeft, fromLeft } from 'flow-static-land/lib/Either'\n\nimport type { Tuple } from 'flow-static-land/src/Tuple'\n\nimport type { ConfigError, ErrorChecker, ConfigCheck, Config } from './index.h'\n\ninterface ErrorCases<-R, -L> {\n  List(list: ConfigError): R,\n  Empty(list: ConfigError): L,\n}\n\ntype StateTuple = Tuple<Config, ConfigCheck>\n\nexport class ErrorSet {\n  list: ConfigError\n  constructor(list: ConfigError) {\n    this.list = list\n  }\n  static of(str: string) {\n    const injected = arr.of(str)\n    return new ErrorSet(injected)\n  }\n  static empty() {\n    const injected = arr.empty()\n    return new ErrorSet(injected)\n  }\n  isEmpty(): boolean {\n    return arr.isEmpty(this.list)\n  }\n  append(error: string) {\n    const injected = arr.snoc(this.list, error)\n    return new ErrorSet(injected)\n  }\n  concat(y: ErrorSet) {\n    const injected = arr.concat(this.list, y.list)\n    return new ErrorSet(injected)\n  }\n  cata<-R, -L>(opts: ErrorCases<R, L>): R | L {\n    if (this.isEmpty()) {\n      return opts.Empty(this.list)\n    }\n    return opts.List(this.list)\n  }\n}\n\nexport class ValidationPair {\n  pair: StateTuple\n  constructor(pair: StateTuple) {\n    this.pair = pair\n  }\n  static of(obj: Config, str: string) {\n    const pair = [obj, ErrorSet.of(str)]\n    const injected = tuple.inj(pair)\n    return new ValidationPair(injected)\n  }\n  static empty(obj: Config) {\n    const pair = [obj, ErrorSet.empty()]\n    const injected = tuple.inj(pair)\n    return new ValidationPair(injected)\n  }\n  first(): Config {\n    return tuple.fst(this.pair)\n  }\n  second(): ErrorSet {\n    return tuple.snd(this.pair)\n  }\n  map(f: (a: ErrorSet) => ErrorSet) {\n    const injected = tuple.map(f, this.pair)\n    return new ValidationPair(injected)\n  }\n  concat(y: ValidationPair) {\n    const f = (a: ErrorSet): ErrorSet =>\n      this.second().concat(a)\n    return y.map(f)\n  }\n  chain(f: (a: Config) => ValidationPair): ValidationPair {\n    const newPair = f(this.first())\n    return this.concat(newPair)\n  }\n}\n\nexport class Validator {\n  list: ConfigCheck\n  constructor(list: ConfigCheck) {\n    this.list = list\n  }\n  static of(list: ErrorChecker[]) {\n    const injected = arr.inj(list)\n    return new Validator(injected)\n  }\n  static empty() {\n    return Validator.of([])\n  }\n  concat(y: Validator) {\n    const injected = arr.concat(this.list, y.list)\n    return new Validator(injected)\n  }\n  reduce(\n    f: (acc: ValidationPair, value: ErrorChecker) => ValidationPair,\n    pair: ValidationPair\n  ): ValidationPair {\n    return arr.reduce(f, pair, this.list)\n  }\n}\n"]}