{"version":3,"sources":["../../src/service/rsa-keys-manger.js"],"names":["KeyManager","uid","publisKeysHex","publicKeysParsed","prepareRsaKeys","selectRsaKeyByFingerPrint","prepared","mapPrepare","modulus","exponent","RSAPublicKey","rsaBox","writer","buffer","getBuffer","fingerprintBytes","slice","reverse","key","map","fingerprints","fingerprintHex","foundKey","fingerprint","prepare","select"],"mappings":";;;;;;;AAEA;;;;AAIA;;AAEA;;AAEA;;;;;;AAIO,IAAMA,kCAAa,CAACC,GAAD,EACxBC,aADwB,EAExBC,gBAFwB,KAEgB;AAAA;AAAA;;AAAA,oBAqBzBC,cArByB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,oBA6BzBC,yBA7ByB;AAAA;AAAA;AAAA;;AACxC,MAAIC,WAAW,KAAf;;AAEA,MAAMC,aAAa,CAAC,EAAEC,OAAF,EAAWC,QAAX,EAAD,KAAsC;AACvD,QAAMC,eAAe,sBAAkB,EAAlB,EAAsBT,GAAtB,CAArB;AACA,QAAMU,SAASD,aAAaE,MAA5B;AACA,4BAAWD,MAAX,EAAmB,uBAAaH,OAAb,CAAnB,EAA0C,GAA1C;AACA,4BAAWG,MAAX,EAAmB,uBAAaF,QAAb,CAAnB,EAA2C,GAA3C;;AAEA,QAAMI,SAASF,OAAOG,SAAP,EAAf;;AAEA,QAAMC,mBAAmB,wBAAcF,MAAd,EAAsBG,KAAtB,CAA4B,CAAC,CAA7B,CAAzB;AACAD,qBAAiBE,OAAjB;AACA,QAAMC,MAAM,qBAAWH,gBAAX,CAAZ;AACA;AACAZ,qBAAiBe,GAAjB,IAAwB;AACtBV,aADsB;AAEtBC;AAFsB,KAAxB;AAID,GAhBD;;AAkBA,oBAAgC;AAC9B,QAAIH,QAAJ,EAAc;;AAEd,UAAM,mBAASa,GAAT,CAAajB,aAAb,EAA4BK,UAA5B,CAAN;;AAEAD,eAAW,IAAX;AACD;;AAED,kBAAyCc,YAAzC,EAAiE;AAC/D,UAAMhB,gBAAN;;AAEA,QAAIiB,uBAAJ;AAAA,QAAoBC,iBAApB;AACA,yBAA0BF,YAA1B,kHAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAA7BG,WAA6B;;AACtCF,uBAAiB,sBAAYE,WAAZ,CAAjB;AACA;AACAD,iBAAWnB,iBAAiBkB,cAAjB,CAAX;AACA,UAAIC,QAAJ,EACE,uBAASC,WAAT,IAAyBD,QAAzB;AACH;AACD,WAAO,KAAP;AACD;;AAED,SAAO;AACLE,aAASpB,cADJ;AAELqB,YAASpB;AAFJ,GAAP;AAID,CAjDM;;kBAmDQL,U","file":"rsa-keys-manger.js","sourcesContent":["//@flow\n\nimport Bluebird from 'bluebird'\n\nimport type { PublicKey } from './main/index.h'\nimport type { Cached } from './api-manager/index.h'\nimport { Serialization } from '../tl'\n\nimport { writeBytes } from '../tl/writer'\n\nimport { bytesToHex, sha1BytesSync,\n  bytesFromHex, strDecToHex } from '../bin'\n\n\nexport const KeyManager = (uid: string,\n  publisKeysHex: PublicKey[],\n  publicKeysParsed: Cached<PublicKey>) => {\n  let prepared = false\n\n  const mapPrepare = ({ modulus, exponent }: PublicKey) => {\n    const RSAPublicKey = new Serialization({}, uid)\n    const rsaBox = RSAPublicKey.writer\n    writeBytes(rsaBox, bytesFromHex(modulus), 'n')\n    writeBytes(rsaBox, bytesFromHex(exponent), 'e')\n\n    const buffer = rsaBox.getBuffer()\n\n    const fingerprintBytes = sha1BytesSync(buffer).slice(-8)\n    fingerprintBytes.reverse()\n    const key = bytesToHex(fingerprintBytes)\n    //$FlowIssue obj[number] === obj[stringNumber]\n    publicKeysParsed[key] = {\n      modulus,\n      exponent\n    }\n  }\n\n  async function prepareRsaKeys() {\n    if (prepared) return\n\n    await Bluebird.map(publisKeysHex, mapPrepare)\n\n    prepared = true\n  }\n\n  async function selectRsaKeyByFingerPrint(fingerprints: string[]) {\n    await prepareRsaKeys()\n\n    let fingerprintHex, foundKey\n    for (const fingerprint of fingerprints) {\n      fingerprintHex = strDecToHex(fingerprint)\n      //$FlowIssue obj[number] === obj[stringNumber]\n      foundKey = publicKeysParsed[fingerprintHex]\n      if (foundKey)\n        return { fingerprint, ...foundKey }\n    }\n    return false\n  }\n\n  return {\n    prepare: prepareRsaKeys,\n    select : selectRsaKeyByFingerPrint\n  }\n}\n\nexport default KeyManager\n"]}