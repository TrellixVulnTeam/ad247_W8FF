{"version":3,"sources":["../../../src/service/networker/index.js"],"names":["log","updatesProcessor","iii","akStopped","storeIntString","writer","value","field","Error","NetworkerThread","constructor","appConfig","storage","dc","authKey","serverSalt","uid","threadID","pendingAcks","state","connectionInited","checkConnectionPeriod","lastServerMessages","checkLongPollCond","longPoll","pendingTime","offline","checkLongPollAfterDcCond","isClean","baseDc","dcID","upload","sleepAfter","checkLongPoll","cleanupSent","get","sendLongPool","event","cancel","checkConnectionPromise","serializer","mtproto","pingID","storeMethod","ping_id","pingMessage","generateSeqNo","getBytes","emit","type","msg_id","message","method","params","options","succ","result","sendEncryptedRequest","timeout","toggleOffline","err","delay","checkConnection","Math","min","performSheduledRequest","resolve","nextReq","length","ackMsgIDs","ack","push","wrapMtpMessage","_","msg_ids","notContentRelated","noShedule","performResend","messages","messagesByteLen","lengthOverflow","singlesCount","logGroup","group","pendingIterator","messageID","deletePending","hasSent","getSent","messageByteLength","size","cond1","cond2","singleInRequest","map","msg","isAPI","max_delay","wait_after","max_wait","netMessage","writePollTime","noResponseMsgs","container","startMaxLength","contBox","innerMessages","noResponseMessages","seq_no","noResponse","groupEnd","addSent","sheduleRequest","requestPerformer","apiBytes","ctx","body","sessionID","encryptedBytes","msgKey","bytes","authKeyUint8","request","byteLength","mtBytes","authKeyID","url","dcMap","requestOpts","responseType","post","data","reject","status","statusText","error","getMsgById","req_msg_id","processMessageAck","sentMessage","acked","emitter","rootEmitter","authKeyBuffer","slice","wrapApiCall","bind","updateSession","setInterval","seqNo","prevSessionID","Array","updateSentMessage","sentMessageID","newInner","inner","innerID","innerSentMessage","deleteSent","newId","wrapMtpCall","pushMessage","deferred","promise","object","storeObject","verifyInnerMessages","serialBox","mapper","afterMessageID","resultType","copyOptions","setPending","Object","pushResend","enabled","undefined","nextReqPromise","parseInt","onOnlineCb","Date","now","then","hasResends","resendMsgIDs","getResends","resendOpts","lastResendReq","resend_msg_ids","response","parseResponse","processMessage","msgID","max","sqrt","console","responseBuffer","encryptedData","reader","authKeyStored","dataWithPadding","hashData","buffer","currentSession","prevSession","deserializerOptions","getter","applyServerSalt","newServerSalt","set","ackMessage","reqResendMessage","addResend","notEmpty","sentIterator","complete","hasPending","isFinite","TypeError","msgidInt","warn","bad_msg_id","bad_msg_seqno","new_server_salt","error_code","badMessage","indexOf","shift","networkerDC","forEach","answer_msg_id","spliceCond","badMsgID","deleteResent","startAll","stopAll","setUpdatesProcessor","callback","Set"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\r\n\r\nimport Promise from 'bluebird'\r\nimport uuid from 'uuid/v4'\r\n\r\nimport { is, contains, mapObjIndexed } from 'ramda'\r\n\r\nimport { tsNow, generateID, applyServerTime } from '../time-manager'\r\nimport random from '../secure-random'\r\nimport { NetMessage, NetContainer } from './net-message'\r\nimport State from './state'\r\nimport { smartTimeout, immediate } from 'mtproto-shared'\r\nimport { httpClient } from '../../http'\r\n\r\nimport { Serialization, Deserialization } from '../../tl'\r\nimport { readResponse, getDataWithPad, readHash, parsedResponse } from '../chain/parse-response'\r\nimport { writeInnerMessage } from '../chain/perform-request'\r\nimport { ErrorBadRequest, ErrorBadResponse } from '../../error'\r\nimport Config from '../../config-provider'\r\n\r\nimport Logger from 'mtproto-logger'\r\n\r\nconst log = Logger`networker`\r\n\r\nimport {\r\n  convertToUint8Array,\r\n  convertToArrayBuffer,\r\n  sha1BytesSync,\r\n  bytesToHex,\r\n  longToBytes,\r\n  uintToInt,\r\n  rshift32\r\n} from '../../bin'\r\n\r\nimport type { AsyncStorage } from '../../plugins/index.h'\r\nimport { TypeWriter } from '../../tl'\r\nimport { writeInt, writeBytes, writeLong } from '../../tl/writer'\r\nimport { apiMessage, encryptApiBytes, mtMessage } from '../chain/encrypted-message'\r\nimport type { Emit } from 'eventemitter2'\r\n\r\nimport LongPoll from '../../plugins/long-poll'\r\nimport { getRandomId } from '../../plugins/math-help'\r\n\r\nlet updatesProcessor: *\r\nlet iii = 0\r\nlet akStopped = false\r\n\r\n//eslint-disable-next-line\r\n// const xhrSendBuffer = !isNode && !('ArrayBufferView' in window)\r\n\r\ntype NetOptions = {\r\n  fileUpload?: boolean,\r\n  fileDownload?: boolean,\r\n  notContentRelated?: boolean,\r\n  afterMessageID?: string,\r\n  resultType?: string,\r\n  messageID?: string\r\n}\r\ntype Bytes = number[]\r\n\r\ntype ContextConfig = {|\r\n  storage: AsyncStorage,\r\n  appConfig: { [key: string]: * }\r\n|}\r\n\r\nconst storeIntString = (writer: TypeWriter) => (value: number | string, field: string) => {\r\n  switch (typeof value) {\r\n    case 'string': return writeBytes(writer, value, `${field}:string`)\r\n    case 'number': return writeInt(writer, value, field)\r\n    default: throw new Error(`tl storeIntString field ${field} value type ${typeof value}`)\r\n  }\r\n}\r\n\r\nexport class NetworkerThread {\r\n  threadID: string = uuid()\r\n  uid: string\r\n  dcID: number\r\n  authKey: Bytes\r\n  authKeyUint8: Uint8Array\r\n  authKeyBuffer: ArrayBuffer\r\n  serverSalt: number[]\r\n  iii: number\r\n  authKeyID: Bytes\r\n  upload: boolean\r\n  pendingAcks: string[] = []\r\n  seqNo: number\r\n  sessionID: Bytes\r\n  prevSessionID: Bytes\r\n  state = new State\r\n  connectionInited = false\r\n  checkConnectionPeriod = 0\r\n  checkConnectionPromise: Promise<*>\r\n  emit: Emit\r\n  lastServerMessages: string[] = []\r\n  offline: boolean\r\n  storage: AsyncStorage\r\n  longPoll: LongPoll\r\n  onOnlineCb: *\r\n  nextReq: *\r\n  appConfig: { [key: string]: * }\r\n  nextReqPromise: *\r\n  lastResendReq: *\r\n  constructor({\r\n      appConfig,\r\n      storage\r\n    }: ContextConfig,\r\n              dc: number,\r\n              authKey: Bytes,\r\n              serverSalt: number[],\r\n              uid: string) {\r\n    this.uid = uid\r\n    this.appConfig = appConfig\r\n    this.storage = storage\r\n    const emitter = Config.rootEmitter(this.uid)\r\n    this.emit = emitter.emit\r\n    this.dcID = dc\r\n    this.iii = iii++\r\n\r\n    this.longPoll = new LongPoll(this)\r\n\r\n    this.authKey = authKey\r\n    this.authKeyUint8 = convertToUint8Array(authKey)\r\n    this.authKeyBuffer = convertToArrayBuffer(authKey)\r\n    this.authKeyID = sha1BytesSync(authKey).slice(-8)\r\n\r\n    //$FlowIssue\r\n    this.wrapApiCall = this.wrapApiCall.bind(this)\r\n\r\n    // this.checkLongPollCond = this.checkLongPollCond.bind(this)\r\n    this.serverSalt = serverSalt\r\n\r\n    this.upload = false //options.fileUpload || options.fileDownload || false\r\n\r\n    emitter.emit('new-networker', this)\r\n\r\n    this.updateSession()\r\n\r\n    setInterval(this.checkLongPoll, 10000) //NOTE make configurable interval\r\n    this.checkLongPoll()\r\n  }\r\n  updateSession() {\r\n    this.seqNo = 0\r\n    this.prevSessionID = this.sessionID\r\n    this.sessionID = new Array(8)\r\n    random(this.sessionID)\r\n  }\r\n\r\n  updateSentMessage(sentMessageID: string) {\r\n    if (!this.state.hasSent(sentMessageID)) return false\r\n    const sentMessage = this.state.getSent(sentMessageID)\r\n\r\n    if (sentMessage instanceof NetContainer) {\r\n      const newInner = []\r\n      for (const innerID of sentMessage.inner) {\r\n        const innerSentMessage = this.updateSentMessage(innerID)\r\n        if (innerSentMessage)\r\n          newInner.push(innerSentMessage.msg_id)\r\n      }\r\n      sentMessage.inner = newInner\r\n    }\r\n    this.state.deleteSent(sentMessage)\r\n    const newId = generateID(this.uid)\r\n    sentMessage.msg_id = newId\r\n    sentMessage.seq_no = this.generateSeqNo(\r\n      sentMessage.notContentRelated ||\r\n      sentMessage.container\r\n    )\r\n    this.state.addSent(sentMessage)\r\n\r\n    return sentMessage\r\n  }\r\n\r\n  generateSeqNo(notContentRelated?: boolean) {\r\n    let seqNo = this.seqNo * 2\r\n\r\n    if (!notContentRelated) {\r\n      seqNo++\r\n      this.seqNo++\r\n    }\r\n\r\n    return seqNo\r\n  }\r\n\r\n  wrapMtpCall(method: string, params: Object, options: NetOptions) {\r\n    const serializer = new Serialization({ mtproto: true }, this.uid)\r\n\r\n    serializer.storeMethod(method, params)\r\n    const seqNo = this.generateSeqNo()\r\n    const message = new NetMessage(\r\n      this.uid,\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n    this.emit('net-message', {\r\n      type  : 'mtp-call',\r\n      msg_id: message.msg_id,\r\n      message,\r\n      method,\r\n      params,\r\n      options\r\n    })\r\n    log(`Call method`, `msg_id`, `seqNo`)(method, message.msg_id, seqNo)\r\n    log(`Call method`, `params`)(params)\r\n\r\n    this.pushMessage(message, options)\r\n    return message.deferred.promise\r\n  }\r\n\r\n  wrapMtpMessage(object: Object, options: NetOptions = {}) {\r\n\r\n    const serializer = new Serialization({ mtproto: true }, this.uid)\r\n    serializer.storeObject(object, 'Object', 'wrap_message')\r\n\r\n    const seqNo = this.generateSeqNo(options.notContentRelated)\r\n    const message = new NetMessage(\r\n      this.uid,\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n    this.emit('net-message', {\r\n      type  : 'mtp-message',\r\n      msg_id: message.msg_id,\r\n      message,\r\n      object,\r\n      options\r\n    })\r\n    log(`MT message`, `msg_id`, `seqNo`)(message.msg_id, seqNo)\r\n    log(`MT message`, `result`)(object)\r\n    verifyInnerMessages(object.msg_ids)\r\n    this.pushMessage(message, options)\r\n    return message\r\n  }\r\n\r\n  wrapApiCall(method: string, params: { [key: string]: * } = {}, options: *): Promise<any> {\r\n    const serializer = new Serialization(options, this.uid)\r\n    const serialBox = serializer.writer\r\n    if (!this.connectionInited) {\r\n      // serializer.storeInt(0xda9b0d0d, 'invokeWithLayer')\r\n      // serializer.storeInt(Config.Schema.API.layer, 'layer')\r\n      // serializer.storeInt(0x69796de9, 'initConnection')\r\n      // serializer.storeInt(Config.App.id, 'api_id')\r\n      // serializer.storeString(navigator.userAgent || 'Unknown UserAgent', 'device_model')\r\n      // serializer.storeString(navigator.platform || 'Unknown Platform', 'system_version')\r\n      // serializer.storeString(Config.App.version, 'app_version')\r\n      // serializer.storeString(navigator.language || 'en', 'lang_code')\r\n      const mapper = storeIntString(serialBox)\r\n      mapObjIndexed(mapper, this.appConfig)\r\n    }\r\n\r\n    if (options.afterMessageID) {\r\n      writeInt(serialBox, 0xcb9f372d, 'invokeAfterMsg')\r\n      writeLong(serialBox, options.afterMessageID, 'msg_id')\r\n    }\r\n\r\n    options.resultType = serializer.storeMethod(method, params)\r\n\r\n    const seqNo = this.generateSeqNo()\r\n    const message = new NetMessage(\r\n      this.uid,\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n    message.isAPI = true\r\n\r\n    this.emit('net-message', {\r\n      type  : 'api-call',\r\n      msg_id: message.msg_id,\r\n      message,\r\n      method,\r\n      params,\r\n      options\r\n    })\r\n    log(`Api call`)(method)\r\n    log(`|      |`, `msg_id`, `seqNo`)(message.msg_id, seqNo)\r\n    log(`|      |`, `params`)(params)\r\n    log(`|      |`, `options`)(options)\r\n    this.pushMessage(message, options)\r\n    return message.deferred.promise\r\n  }\r\n\r\n  checkLongPollCond = () =>\r\n    this.longPoll.pendingTime > tsNow() ||\r\n    !!this.offline ||\r\n    akStopped\r\n\r\n  checkLongPollAfterDcCond = (isClean: boolean, baseDc: number) => isClean && (\r\n    this.dcID !== baseDc ||\r\n    this.upload ||\r\n    this.sleepAfter &&\r\n    this.sleepAfter < tsNow()\r\n  )\r\n\r\n  checkLongPoll = async () => {\r\n    const isClean = this.cleanupSent()\r\n    if (this.checkLongPollCond())\r\n      return false\r\n\r\n    const baseDc: number = await this.storage.get('dc')\r\n    if (this.checkLongPollAfterDcCond(isClean, baseDc))\r\n    // console.warn(dTime(), 'Send long-poll for DC is delayed', this.dcID, this.sleepAfter)\r\n      return\r\n    return this.longPoll.sendLongPool()\r\n  }\r\n\r\n  pushMessage(message: NetMessage, options: NetOptions = {}) {\r\n    message.copyOptions(options)\r\n    this.emit('push-message', {\r\n      threadID: this.threadID,\r\n      message,\r\n      options\r\n    })\r\n    this.state.addSent(message)\r\n    this.state.setPending(message.msg_id)\r\n\r\n    if (!options.noShedule)\r\n      this.sheduleRequest()\r\n    if (is(Object, options))\r\n      options.messageID = message.msg_id\r\n  }\r\n\r\n  pushResend(messageID: string, delay: number = 0) {\r\n    const value = tsNow() + delay\r\n    const sentMessage = this.state.getSent(messageID)\r\n    if (sentMessage instanceof NetContainer)\r\n      for (const msg of sentMessage.inner)\r\n        this.state.setPending(msg, value)\r\n    else\r\n      this.state.setPending(messageID, value)\r\n\r\n    this.sheduleRequest(delay)\r\n  }\r\n\r\n\r\n\r\n  checkConnection = async (event: * ) => {\r\n    log(`Check connection`)(event)\r\n    smartTimeout.cancel(this.checkConnectionPromise)\r\n\r\n    const serializer = new Serialization({ mtproto: true }, this.uid)\r\n    const pingID = getRandomId()\r\n\r\n    serializer.storeMethod('ping', { ping_id: pingID })\r\n\r\n    const pingMessage = new NetMessage(\r\n      this.uid,\r\n      this.generateSeqNo(true),\r\n      serializer.getBytes()\r\n    )\r\n    this.emit('net-message', {\r\n      type   : 'mtp-call',\r\n      msg_id : pingMessage.msg_id,\r\n      message: pingMessage,\r\n      method : 'ping',\r\n      params : { ping_id: pingID },\r\n      options: {}\r\n    })\r\n    let succ = false\r\n\r\n    try {\r\n      const result = await this.sendEncryptedRequest(pingMessage, { timeout: 15000 })\r\n      succ = true\r\n      this.toggleOffline(false)\r\n      log(`checkConnection, result`)(result)\r\n    } catch (err) {\r\n      log(`encrypted request fail`)(err)\r\n    }\r\n    if (succ) return\r\n    const delay = this.checkConnectionPeriod * 1e3\r\n    log(`checkConnection, Delay`)(delay)\r\n    this.checkConnectionPromise = smartTimeout(\r\n      this.checkConnection, delay)\r\n    this.checkConnectionPeriod = Math.min(60, this.checkConnectionPeriod * 1.5)\r\n  }\r\n\r\n  toggleOffline(enabled: boolean) {\r\n    // console.log('toggle ', enabled, this.dcID, this.iii)\r\n    if (!this.offline !== undefined && this.offline == enabled)\r\n      return false\r\n\r\n    this.offline = enabled\r\n\r\n    if (this.offline) {\r\n      smartTimeout.cancel(this.nextReqPromise)\r\n      delete this.nextReq\r\n\r\n      if (this.checkConnectionPeriod < 1.5)\r\n        this.checkConnectionPeriod = 0\r\n\r\n\r\n      this.checkConnectionPromise = smartTimeout(\r\n        this.checkConnection, parseInt(this.checkConnectionPeriod * 1000))\r\n      this.checkConnectionPeriod = Math.min(30, (1 + this.checkConnectionPeriod) * 1.5)\r\n\r\n      this.onOnlineCb = this.checkConnection\r\n      this.emit('net.offline', this.onOnlineCb)\r\n    } else {\r\n      this.longPoll.pendingTime = Date.now()\r\n        //NOTE check long state was here\r\n      this.checkLongPoll().then(() => {})\r\n      this.sheduleRequest()\r\n\r\n      if (this.onOnlineCb)\r\n        this.emit('net.online', this.onOnlineCb)\r\n\r\n      smartTimeout.cancel(this.checkConnectionPromise)\r\n\r\n    }\r\n  }\r\n  performResend() {\r\n    if (this.state.hasResends()) {\r\n      const resendMsgIDs = [...this.state.getResends()]\r\n      const resendOpts = { noShedule: true, notContentRelated: true }\r\n        // console.log('resendReq messages', resendMsgIDs)\r\n      const msg = this.wrapMtpMessage({\r\n        _      : 'msg_resend_req',\r\n        msg_ids: resendMsgIDs\r\n      }, resendOpts)\r\n      this.lastResendReq = { req_msg_id: msg.msg_id, resend_msg_ids: resendMsgIDs }\r\n    }\r\n  }\r\n  performSheduledRequest = () => { //TODO extract huge method\r\n    // console.log(dTime(), 'sheduled', this.dcID, this.iii)\r\n    if (this.offline || akStopped) {\r\n      log(`Cancel sheduled`)(``)\r\n      return Promise.resolve(false)\r\n    }\r\n    delete this.nextReq\r\n    if (this.pendingAcks.length) {\r\n      const ackMsgIDs = []\r\n      for (const ack of this.pendingAcks)\r\n        ackMsgIDs.push(ack)\r\n      log('acking messages')(ackMsgIDs)\r\n      this.wrapMtpMessage({\r\n          _      : 'msgs_ack',\r\n          msg_ids: ackMsgIDs\r\n      }, {\r\n          notContentRelated: true,\r\n          noShedule        : true\r\n      }) //TODO WTF Why we make wrapped message and doesnt use it?\r\n        // const res = await msg.deferred.promise\r\n        // log(`AWAITED`, `ack`)(res)\r\n    }\r\n\r\n    this.performResend()\r\n\r\n    const messages = []\r\n    let message: NetMessage\r\n    let messagesByteLen = 0\r\n      // const currentTime = tsNow()\r\n    let lengthOverflow = false\r\n    let singlesCount = 0\r\n    const logGroup = log.group('perform sheduled request')\r\n    for (const [messageID, value] of this.state.pendingIterator()) {\r\n      if (value && value < tsNow()) continue\r\n      this.state.deletePending(messageID)\r\n      if (!this.state.hasSent(messageID)) continue\r\n      message = this.state.getSent(messageID)\r\n      logGroup('message')(message)\r\n      logGroup('messageID, value' )(messageID, value)\r\n      const messageByteLength = message.size() + 32\r\n      const cond1 = !message.notContentRelated && lengthOverflow\r\n      const cond2 = !message.notContentRelated &&\r\n        messagesByteLen + messageByteLength > 655360 // 640 Kb\r\n      if (cond1) continue\r\n      if (cond2) {\r\n        lengthOverflow = true\r\n        continue\r\n      }\r\n      if (message.singleInRequest) {\r\n        singlesCount++\r\n        if (singlesCount > 1) continue\r\n      }\r\n      messages.push(message)\r\n      messagesByteLen += messageByteLength\r\n    }\r\n    logGroup('message, final')(message)\r\n    logGroup('messages')(messages)\r\n    messages.map(msg => this.emit('message-in', msg))\r\n\r\n    if (!message) return Promise.resolve(false)\r\n\r\n    if (message.isAPI && !message.longPoll) {\r\n      const serializer = new Serialization({ mtproto: true }, this.uid)\r\n      const params = {\r\n        max_delay : 1000,\r\n        wait_after: 550,\r\n        max_wait  : 3000\r\n      }\r\n      serializer.storeMethod('http_wait', params)\r\n      const netMessage = new NetMessage(\r\n        this.uid,\r\n        this.generateSeqNo(),\r\n        serializer.getBytes()\r\n      )\r\n      this.longPoll.writePollTime()\r\n      this.emit('net-message', {\r\n        type   : 'mtp-call',\r\n        msg_id : netMessage.msg_id,\r\n        message: netMessage,\r\n        method : 'http_wait',\r\n        params,\r\n        options: {}\r\n      })\r\n      messages.push(netMessage)\r\n    }\r\n\r\n    if (!messages.length) {\r\n      // console.log('no sheduled messages')\r\n      return Promise.resolve()\r\n    }\r\n\r\n    let noResponseMsgs = []\r\n\r\n    if (messages.length > 1) {\r\n      const container = new Serialization({ mtproto: true, startMaxLength: messagesByteLen + 64 }, this.uid)\r\n      const contBox = container.writer\r\n      writeInt(contBox, 0x73f1f8dc, 'CONTAINER[id]')\r\n      writeInt(contBox, messages.length, 'CONTAINER[count]')\r\n\r\n      const {\r\n        innerMessages,\r\n        noResponseMessages\r\n      } = writeInnerMessage({\r\n        writer: contBox,\r\n        messages\r\n      })\r\n      noResponseMsgs = noResponseMessages\r\n\r\n      message = new NetContainer(\r\n        this.uid,\r\n        this.generateSeqNo(true),\r\n        container.getBytes(true),\r\n        innerMessages)\r\n\r\n      logGroup(`Container`)(innerMessages,\r\n                            noResponseMessages,\r\n                            message.msg_id,\r\n                            message.seq_no)\r\n\r\n    } else {\r\n      if (message.noResponse)\r\n        noResponseMsgs.push(message.msg_id)\r\n    }\r\n    logGroup.groupEnd()\r\n    this.state.addSent(message)\r\n\r\n    this.pendingAcks = [] //TODO WTF,he just clear and forget them at all?!?\r\n    if (lengthOverflow || singlesCount > 1) this.sheduleRequest()\r\n\r\n    return this.requestPerformer(message, noResponseMsgs)\r\n  }\r\n\r\n\r\n  async requestPerformer(message: NetMessage, noResponseMsgs: string[]) {\r\n    try {\r\n      const result = await this.sendEncryptedRequest(message)\r\n      this.toggleOffline(false)\r\n      const response = await this.parseResponse(result.data)\r\n      log(`Server response`, `dc${this.dcID}`)(response)\r\n      log(`message`)(message)\r\n\r\n      await this.processMessage(\r\n        response.response,\r\n        response.messageID,\r\n        response.sessionID)\r\n\r\n      for (const msgID of noResponseMsgs)\r\n        if (this.state.hasSent(msgID)) {\r\n          const msg = this.state.getSent(msgID)\r\n          this.state.deleteSent(msg)\r\n          msg.deferred.resolve()\r\n        }\r\n\r\n      this.checkConnectionPeriod = Math.max(1.1, Math.sqrt(this.checkConnectionPeriod))\r\n\r\n      //return\r\n      this.checkLongPoll() //TODO Bluebird warning here\r\n    } catch (error) {\r\n      console.log('Encrypted request failed', error)\r\n\r\n      if (message instanceof NetContainer) {\r\n        for (const msgID of message.inner)\r\n          this.state.setPending(msgID)\r\n        this.state.deleteSent(message)\r\n      } else\r\n        this.state.setPending(message.msg_id)\r\n\r\n\r\n      for (const msgID of noResponseMsgs)\r\n        if (this.state.hasSent(msgID)) {\r\n          const msg = this.state.getSent(msgID)\r\n          this.state.deleteSent(msg)\r\n          this.state.deletePending(msgID)\r\n          msg.deferred.reject()\r\n        }\r\n\r\n      this.toggleOffline(true)\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  sendEncryptedRequest = async (message: NetMessage, options: NetOptions = {}) => {\r\n    const apiBytes = apiMessage({\r\n      ctx       : new Serialization({ startMaxLength: message.body.length + 64 }, this.uid).writer,\r\n      serverSalt: this.serverSalt,\r\n      sessionID : this.sessionID,\r\n      message\r\n    })\r\n\r\n    const { encryptedBytes, msgKey } = await encryptApiBytes({\r\n      bytes  : apiBytes,\r\n      authKey: this.authKeyUint8\r\n    })\r\n\r\n    const request = new Serialization({ startMaxLength: encryptedBytes.byteLength + 256 }, this.uid).writer\r\n\r\n    const mtBytes = mtMessage({\r\n      ctx      : request,\r\n      authKeyID: this.authKeyID,\r\n      msgKey,\r\n      encryptedBytes\r\n    })\r\n\r\n\r\n    const url = Config.dcMap(this.uid, this.dcID)\r\n    const requestOpts = { responseType: 'arraybuffer', ...options }\r\n\r\n    try {\r\n      const result = await httpClient.post(url, mtBytes, requestOpts)\r\n      if (!result.data.byteLength) {\r\n        const err = new ErrorBadResponse(url, result)\r\n        this.emit('response-raw', err)\r\n        return Promise.reject(err)\r\n      }\r\n      this.emit('response-raw', {\r\n        data      : result.data,\r\n        status    : result.status,\r\n        statusText: result.statusText,\r\n        message,\r\n        options\r\n      })\r\n      return result\r\n    } catch (error) {\r\n      const err = new ErrorBadRequest(url, error)\r\n      this.emit('response-raw', err)\r\n      return Promise.reject(err)\r\n    }\r\n  }\r\n\r\n  getMsgById = ({ req_msg_id }: { req_msg_id: string }) => this.state.getSent(req_msg_id)\r\n\r\n  async parseResponse(responseBuffer: ArrayBuffer | Buffer) {\r\n\r\n    const { msgKey, encryptedData } = readResponse({\r\n      reader       : new Deserialization(responseBuffer, {}, this.uid),\r\n      response     : responseBuffer,\r\n      authKeyStored: this.authKeyID\r\n    })\r\n\r\n    const dataWithPadding = await getDataWithPad({\r\n      authKey: this.authKeyUint8,\r\n      msgKey,\r\n      encryptedData\r\n    })\r\n\r\n    const {\r\n      hashData,\r\n      seqNo,\r\n      messageID,\r\n      buffer,\r\n      sessionID\r\n    } = readHash({\r\n      reader        : new Deserialization(dataWithPadding, { mtproto: true }, this.uid),\r\n      currentSession: this.sessionID,\r\n      prevSession   : this.prevSessionID,\r\n      dataWithPadding\r\n    })\r\n\r\n    const deserializerOptions = {\r\n      mtproto: true,\r\n      getter : this.getMsgById\r\n    }\r\n    const response = await parsedResponse({\r\n      hashData,\r\n      msgKey,\r\n      reader: new Deserialization(buffer, deserializerOptions, this.uid)\r\n    })\r\n\r\n    return {\r\n      response,\r\n      messageID,\r\n      sessionID,\r\n      seqNo\r\n    }\r\n  }\r\n\r\n  async applyServerSalt(newServerSalt: string) {\r\n    const serverSalt = longToBytes(newServerSalt)\r\n    await this.storage.set(`dc${ this.dcID }_server_salt`, bytesToHex(serverSalt))\r\n\r\n    this.serverSalt = serverSalt\r\n    return true\r\n  }\r\n\r\n  sheduleRequest(delay: number = 0) {\r\n    if (this.offline) this.checkConnection('forced shedule')\r\n    const nextReq = tsNow() + delay\r\n\r\n    if (delay && this.nextReq && this.nextReq <= nextReq)\r\n      return false\r\n\r\n    // console.log(dTime(), 'shedule req', delay)\r\n    // console.trace()\r\n    smartTimeout.cancel(this.nextReqPromise)\r\n    if (delay > 0)\r\n      this.nextReqPromise = smartTimeout(\r\n        this.performSheduledRequest, delay)\r\n    else\r\n      immediate(this.performSheduledRequest)\r\n\r\n    this.nextReq = nextReq\r\n  }\r\n\r\n  ackMessage(msgID: string) {\r\n    /*console.trace(msgID)\r\n    if (this.pendingAcks.includes(msgID)) {\r\n      debugger\r\n    }*/\r\n    // console.log('ack message', msgID)\r\n    if (contains(msgID, this.pendingAcks)) return\r\n    this.pendingAcks.push(msgID)\r\n    this.sheduleRequest(30000)\r\n  }\r\n\r\n  reqResendMessage(msgID: string) {\r\n    log(`Req resend`)(msgID)\r\n    this.state.addResend(msgID)\r\n    this.sheduleRequest(100)\r\n  }\r\n\r\n  cleanupSent() {\r\n    let notEmpty = false\r\n      // console.log('clean start', this.dcID/*, this.state.sent*/)\r\n\r\n    for (const [msgID, message] of this.state.sentIterator()) {\r\n      let complete = true\r\n      if (message.notContentRelated && !this.state.hasPending(msgID))\r\n      // console.log('clean notContentRelated', msgID)\r\n        this.state.deleteSent(message)\r\n      else if (message instanceof NetContainer) {\r\n        for (const inner of message.inner) {\r\n          if (this.state.hasSent(inner)) {\r\n            // console.log('clean failed, found', msgID, message.inner[i],\r\n            // this.state.getSent(message.inner[i]).seq_no)\r\n            notEmpty = true\r\n            complete = false\r\n            break\r\n          }\r\n        }\r\n        // console.log('clean container', msgID)\r\n        if (complete)\r\n          this.state.deleteSent(message)\r\n      } else\r\n        notEmpty = true\r\n    }\r\n    return !notEmpty\r\n  }\r\n\r\n  processMessageAck = (messageID: string) => {\r\n    const sentMessage = this.state.getSent(messageID)\r\n    if (sentMessage && !sentMessage.acked) {\r\n      delete sentMessage.body\r\n      sentMessage.acked = true\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  async processMessage(message: *, messageID: string, sessionID: Uint8Array) {\r\n    if (!isFinite(messageID)) {\r\n      throw new TypeError(`Message ID should be finite ${messageID} ${typeof messageID}`)\r\n    }\r\n    const msgidInt = parseInt(messageID, 10)\r\n    if (msgidInt % 2) {\r\n      console.warn('[MT] Server even message id: ', messageID, message)\r\n      return\r\n    }\r\n    this.emit('incoming-message', {\r\n      threadID: this.threadID,\r\n      message,\r\n      messageID,\r\n      sessionID\r\n    })\r\n    switch (message._) {\r\n      case 'msg_container': {\r\n        for (const inner of message.messages)\r\n          await this.processMessage(inner, inner.msg_id, sessionID)\r\n        break\r\n      }\r\n      case 'bad_server_salt': {\r\n        log(`Bad server salt`)(message)\r\n        const sentMessage = this.state.getSent(message.bad_msg_id)\r\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\r\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\r\n          throw new Error('[MT] Bad server salt for invalid message')\r\n        }\r\n\r\n        await this.applyServerSalt(message.new_server_salt)\r\n        this.pushResend(message.bad_msg_id)\r\n        this.ackMessage(messageID)\r\n        break\r\n      }\r\n      case 'bad_msg_notification': {\r\n        log(`Bad msg notification`)(message)\r\n        const sentMessage = this.state.getSent(message.bad_msg_id)\r\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\r\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\r\n          throw new Error('[MT] Bad msg notification for invalid message')\r\n        }\r\n\r\n        if (message.error_code == 16 || message.error_code == 17) {\r\n          if (applyServerTime(\r\n              this.uid,\r\n              rshift32(messageID)\r\n            )) {\r\n            log(`Update session`)()\r\n            this.updateSession()\r\n          }\r\n          const badMessage = this.updateSentMessage(message.bad_msg_id)\r\n          if (badMessage instanceof NetMessage)\r\n            this.pushResend(badMessage.msg_id)\r\n          this.ackMessage(messageID)\r\n        }\r\n        break\r\n      }\r\n      case 'message': {\r\n        if (this.lastServerMessages.indexOf(messageID) != -1) {\r\n          // console.warn('[MT] Server same messageID: ', messageID)\r\n          this.ackMessage(messageID)\r\n          return\r\n        }\r\n        this.lastServerMessages.push(messageID)\r\n        if (this.lastServerMessages.length > 100) {\r\n          this.lastServerMessages.shift()\r\n        }\r\n        await this.processMessage(message.body, message.msg_id, sessionID)\r\n        break\r\n      }\r\n      case 'new_session_created': {\r\n        // this.ackMessage(messageID)\r\n\r\n        // this.processMessageAck(message.first_msg_id)\r\n        // await this.applyServerSalt(message.server_salt)\r\n\r\n        this.emit('new-session', {\r\n          threadID   : this.threadID,\r\n          networkerDC: this.dcID,\r\n          messageID,\r\n          message\r\n        })\r\n\r\n        // const baseDcID = await this.storage.get('dc')\r\n        // const updateCond =\r\n        //   baseDcID === this.dcID &&\r\n        //   !this.upload &&\r\n        //   updatesProcessor\r\n        // if (updateCond)\r\n        //   updatesProcessor(message, true)\r\n\r\n        break\r\n      }\r\n      case 'msgs_ack': {\r\n        message.msg_ids.forEach(this.processMessageAck)\r\n        break\r\n      }\r\n      case 'msg_detailed_info': {\r\n        if (!this.state.hasSent(message.msg_id)) {\r\n          this.ackMessage(message.answer_msg_id)\r\n          break\r\n        }\r\n        break\r\n      }\r\n      case 'msg_new_detailed_info': {\r\n        this.ackMessage(message.answer_msg_id)\r\n        this.reqResendMessage(message.answer_msg_id)\r\n        break\r\n      }\r\n      case 'msgs_state_info': {\r\n        this.ackMessage(message.answer_msg_id)\r\n        const spliceCond =\r\n          this.lastResendReq &&\r\n          //eslint-disable-next-line\r\n          this.lastResendReq.req_msg_id == message.req_msg_id;\r\n        if (spliceCond)\r\n          for (const badMsgID of this.lastResendReq.resend_msg_ids)\r\n            this.state.deleteResent(badMsgID)\r\n        break\r\n      }\r\n      case 'rpc_result': {\r\n        this.ackMessage(messageID)\r\n\r\n        const sentMessageID = message.req_msg_id\r\n        const sentMessage = this.state.getSent(sentMessageID)\r\n\r\n        this.processMessageAck(sentMessageID)\r\n        if (!sentMessage) break\r\n\r\n        if (message.result._ == 'rpc_error') {\r\n          this.emit('rpc-error', {\r\n            threadID   : this.threadID,\r\n            networkerDC: this.dcID,\r\n            error      : message.result,\r\n            sentMessage,\r\n            message\r\n          })\r\n\r\n        } else {\r\n          this.emit('rpc-result', {\r\n            threadID   : this.threadID,\r\n            networkerDC: this.dcID,\r\n            message,\r\n            sentMessage,\r\n            result     : message.result\r\n          })\r\n          if (sentMessage.isAPI)\r\n            this.connectionInited = true\r\n        }\r\n        this.state.deleteSent(sentMessage)\r\n        break\r\n      }\r\n      default: {\r\n        this.ackMessage(messageID)\r\n        this.emit('untyped-message', {\r\n          threadID   : this.threadID,\r\n          networkerDC: this.dcID,\r\n          message,\r\n          messageID,\r\n          sessionID,\r\n          result     : message.result\r\n        })\r\n        if (updatesProcessor) updatesProcessor(message, true)\r\n        break\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const startAll = () => {\r\n  if (akStopped) {\r\n    akStopped = false\r\n    updatesProcessor({ _: 'new_session_created' }, true)\r\n  }\r\n}\r\n\r\nexport const stopAll = () => akStopped = true\r\n\r\nexport const setUpdatesProcessor = (callback: *) =>\r\n  updatesProcessor = callback\r\n\r\n\r\nconst verifyInnerMessages = (messages) => {\r\n  if (messages.length !== new Set(messages).size) {\r\n    console.log(`!!!!!!WARN!!!!!!`, 'container check failed', messages)\r\n      // throw new Error('Container bug')\r\n  }\r\n}\r\n\r\nexport default NetworkerThread\r\n\r\nexport type { NetworkerThread as NetworkerType }\r\n"]}