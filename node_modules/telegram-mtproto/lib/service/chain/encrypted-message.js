'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mtMessage = exports.encryptApiBytes = exports.apiMessage = undefined;

var _crypto = require('../../crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _msgKey = require('./msg-key');

var _msgKey2 = _interopRequireDefault(_msgKey);

var _writer = require('../../tl/writer');

var _netMessage = require('../networker/net-message');

var _typeBuffer = require('../../tl/type-buffer');

var _mtprotoLogger = require('mtproto-logger');

var _mtprotoLogger2 = _interopRequireDefault(_mtprotoLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var log = _mtprotoLogger2.default`encrypted message`;

var apiMessage = exports.apiMessage = ({ ctx, serverSalt, sessionID, message }) => {
  (0, _writer.writeIntBytes)(ctx, serverSalt, 64, 'salt');
  (0, _writer.writeIntBytes)(ctx, sessionID, 64, 'session_id');
  (0, _writer.writeLong)(ctx, message.msg_id, 'message_id');
  (0, _writer.writeInt)(ctx, message.seq_no, 'seq_no');

  (0, _writer.writeInt)(ctx, message.body.length, 'message_data_length');
  (0, _writer.writeIntBytes)(ctx, message.body, false, 'message_data');

  var apiBytes = ctx.getBuffer();

  return apiBytes;
};

function* _ref2({ bytes, authKey }) {
  var bytesHash = yield _crypto2.default.sha1Hash(bytes);
  var msgKey = new Uint8Array(bytesHash).subarray(4, 20);
  var [aesKey, aesIv] = yield (0, _msgKey2.default)(authKey, msgKey, true);
  var encryptedBytes = yield _crypto2.default.aesEncrypt(bytes, aesKey, aesIv);

  return { encryptedBytes, msgKey };
}

var encryptApiBytes = exports.encryptApiBytes = (() => {
  var _ref = _asyncToGenerator(_ref2);

  return function encryptApiBytes(_x) {
    return _ref.apply(this, arguments);
  };
})();

var mtMessage = exports.mtMessage = ({ ctx, authKeyID, msgKey, encryptedBytes }) => {
  (0, _writer.writeIntBytes)(ctx, authKeyID, 64, 'auth_key_id');
  (0, _writer.writeIntBytes)(ctx, msgKey, 128, 'msg_key');
  (0, _writer.writeIntBytes)(ctx, encryptedBytes, false, 'encrypted_data');

  var mtBytes = ctx.getArray();

  return mtBytes;
};
//# sourceMappingURL=encrypted-message.js.map