{"version":3,"sources":["../../../src/service/main/index.js"],"names":["log","api57","require","mtproto57","apiConfig","invokeWithLayer","layer","initConnection","api_id","device_model","system_version","app_version","lang_code","generateLayers","api","mt","apiLayer","mtLayer","data","rest","length","MTProto","constructor","config","emitter","wildcard","on","bind","emit","state","defaultDC","processMessage","threadID","message","networker","threads","get","_","dcID","fullConfig","configNormalization","dcMap","server","schema","mtSchema","uid","next","signIn","rootEmitter","apiSchema","storage","app","bus","publicKeys","publisKeysHex","apiNormalized","invokeLayer","fullCfg","modulus","exponent"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport EventEmitter from 'eventemitter2'\n\nimport { ApiManager } from '../api-manager'\nimport MemoryStorage from '../../plugins/memory-storage'\nimport Layout from '../../layout'\n\nimport configValidator from './config-validation'\nimport generateInvokeLayer from './invoke-layer-generator'\nimport { curriedRegister } from '../../config-provider'\nimport State from './state'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`main`\n\nimport parseServerConfig from '../../config-check/dc'\nimport streamBus from '../../event/stream-bus'\nimport { ScopedEmitter } from '../../event'\nimport { type AsyncStorage } from '../../plugins/index.h'\nimport { type TLSchema } from '../../tl/index.h'\nimport { type ApiConfig, type ConfigType, type StrictConfig, type PublicKey } from './index.h'\nimport { type Emit, type On } from 'eventemitter2'\nimport { type ProcessMessage } from '../emit.h'\n// import type { ApiManagerInstance } from '../api-manager/index.h'\n\nconst api57 = require('../../../schema/api-57.json')\nconst mtproto57 = require('../../../schema/mtproto-57.json')\n\nconst apiConfig: ApiConfig = {\n  invokeWithLayer: 0xda9b0d0d,\n  layer          : 57,\n  initConnection : 0x69796de9,\n  api_id         : 49631,\n  device_model   : 'Unknown UserAgent',\n  system_version : 'Unknown Platform',\n  app_version    : '1.0.1',\n  lang_code      : 'en'\n}\n\nconst generateLayers = (api: TLSchema, mt: TLSchema) => ({\n  apiLayer: new Layout(api),\n  mtLayer : new Layout(mt),\n})\n\nclass MTProto {\n  config: StrictConfig\n  uid: string\n  emitter: EventEmitter = new EventEmitter({\n    wildcard: true\n  })\n  api: ApiManager\n  on: On = this.emitter.on.bind(this.emitter)\n  emit: Emit = this.emitter.emit.bind(this.emitter)\n  storage: AsyncStorage\n  state = new State\n  defaultDC: number = 2\n  bus: *\n  constructor(config: ConfigType) {\n    const fullConfig = configNormalization(config)\n    const dcMap = parseServerConfig(config.server)\n    this.config = fullConfig\n    const { apiLayer, mtLayer } = generateLayers(this.config.schema, this.config.mtSchema)\n    const { uid, next } = curriedRegister()\n    next({\n      signIn     : false,\n      emit       : this.emit,\n      rootEmitter: new ScopedEmitter(uid, this.emitter),\n      schema     : {\n        apiSchema: fullConfig.schema,\n        mtSchema : fullConfig.mtSchema\n      },\n      layer: {\n        apiLayer,\n        mtLayer\n      },\n      dcMap\n    })\n    this.uid = uid\n    this.storage = fullConfig.app.storage\n    this.api = new ApiManager(fullConfig, uid)\n    this.emitter.on('*', (data, ...rest) => {\n      log('event')(data)\n      if (rest.length > 0)\n        log('event', 'rest')(rest)\n    })\n    this.bus = streamBus(this)\n  }\n\n  processMessage = ({ threadID, message }: $PropertyType<ProcessMessage, 'value'>) => {\n    const networker = this.state.threads.get(threadID)\n    if (networker == null) return\n    log('observer', 'type')(message._, networker.dcID)\n  }\n}\n\nexport default MTProto\n\nconst configNormalization = (config: ConfigType): StrictConfig => {\n  const {\n    server = {},\n    api = {},\n    app: {\n      storage = new MemoryStorage,\n      publicKeys = publisKeysHex\n    } = {},\n    schema = api57,\n    mtSchema = mtproto57,\n  } = config\n  const apiNormalized = { ...apiConfig, ...api }\n  const invokeLayer = generateInvokeLayer(apiNormalized.layer)\n  apiNormalized.invokeWithLayer = invokeLayer\n  const fullCfg = {\n    server,\n    api: apiNormalized,\n    app: { storage, publicKeys },\n    schema,\n    mtSchema\n  }\n  configValidator(fullCfg)\n  return fullCfg\n}\n\nexport type { MTProto }\n\n/**\n*  Server public key, obtained from here: https://core.telegram.org/api/obtaining_api_id\n*\n* -----BEGIN RSA PUBLIC KEY-----\n* MIIBCgKCAQEAwVACPi9w23mF3tBkdZz+zw = rzKOaaQdr01vAbU4E1pvkfj4sqDsm6\n* lyDONS789sVoD/xCS9Y0hkkC3gtL1tSfTlgCMOOul9lcixlEKzwKENj1Yz/s7daS\n* an9tqw3bfUV/nqgbhGX81v/+7RFAEd+RwFnK7a+XYl9sluzHRyVVaTTveB2GazTw\n* Efzk2DWgkBluml8OREmvfraX3bkHZJTKX4EQSjBbbdJ2ZXIsRrYOXfaA+xayEGB+\n* 8hdlLmAjbCVfaigxX0CDqWeR1yFL9kwd9P0NsZRPsmoqVwMbMu7mStFai6aIhc3n\n* Slv8kg9qv1m6XHVQY3PnEw+QQtqSIXklHwIDAQAB\n* -----END RSA PUBLIC KEY-----\n*/\n\nconst publisKeysHex: PublicKey[] = [{\n  modulus:\n  'c150023e2f70db7985ded064759cfecf0af328e69a41daf4d6f01b538135a6f91f' +\n  '8f8b2a0ec9ba9720ce352efcf6c5680ffc424bd634864902de0b4bd6d49f4e5802' +\n  '30e3ae97d95c8b19442b3c0a10d8f5633fecedd6926a7f6dab0ddb7d457f9ea81b' +\n  '8465fcd6fffeed114011df91c059caedaf97625f6c96ecc74725556934ef781d86' +\n  '6b34f011fce4d835a090196e9a5f0e4449af7eb697ddb9076494ca5f81104a305b' +\n  '6dd27665722c46b60e5df680fb16b210607ef217652e60236c255f6a28315f4083' +\n  'a96791d7214bf64c1df4fd0db1944fb26a2a57031b32eee64ad15a8ba68885cde7' +\n  '4a5bfc920f6abf59ba5c75506373e7130f9042da922179251f',\n  exponent: '010001'\n}]\n\n"]}