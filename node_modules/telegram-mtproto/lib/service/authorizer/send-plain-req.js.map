{"version":3,"sources":["../../../src/service/authorizer/send-plain-req.js"],"names":["is404","notError","SendPlain","uid","onlySendPlainReq","url","requestBuffer","requestLength","byteLength","requestArray","Int32Array","header","headBox","writer","headerBuffer","getBuffer","headerArray","headerLength","resultBuffer","ArrayBuffer","resultArray","set","length","requestData","reqPromise","post","responseType","props","req","onlySendPlainErr","err","error","emit","reject","onlySendPlainRes","data","deserializer","mtproto","ctx","typeBuffer","e","status","statusText","sendPlainReq","then"],"mappings":"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","file":"send-plain-req.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\n\nimport { has, pathEq, allPass } from 'ramda'\n\nimport httpClient from '../../http'\nimport { ErrorBadResponse, ErrorNotFound } from '../../error'\nimport { generateID } from '../time-manager'\nimport { readLong, readInt } from '../../tl/reader'\nimport { writeLong, writeLongP, writeInt } from '../../tl/writer'\nimport Config from '../../config-provider'\nimport { Serialization, Deserialization } from '../../tl'\n\nimport request from '../chain'\n\nconst is404 = pathEq(['response', 'status'], 404)\nconst notError = allPass([has('message'), has('type')])\n\nconst SendPlain = (uid: string) => {\n  const onlySendPlainReq = (url: string, requestBuffer: ArrayBuffer) => {\n    const requestLength = requestBuffer.byteLength,\n          requestArray = new Int32Array(requestBuffer)\n\n    const header = new Serialization({}, uid)\n    const headBox = header.writer\n\n    writeLongP(headBox, 0, 0, 'auth_key_id') // Auth key\n    writeLong(headBox, generateID(uid), 'msg_id') // Msg_id\n    writeInt(headBox, requestLength, 'request_length')\n\n    const headerBuffer: ArrayBuffer = headBox.getBuffer(),\n          headerArray = new Int32Array(headerBuffer)\n    const headerLength = headerBuffer.byteLength\n\n    const resultBuffer = new ArrayBuffer(headerLength + requestLength),\n          resultArray = new Int32Array(resultBuffer)\n\n    resultArray.set(headerArray)\n    resultArray.set(requestArray, headerArray.length)\n\n    const requestData = resultArray\n    // let reqPromise\n    // try {\n    const reqPromise = httpClient.post(url, requestData, {\n      responseType: 'arraybuffer'\n    })\n    // } catch (e) {\n    //   reqPromise = Promise.reject(new ErrorBadResponse(url, e))\n    // }\n    return Promise.props({ url, req: reqPromise })\n  }\n\n  const onlySendPlainErr = (err) => {\n    let error\n    switch (true) {\n      case is404(err):\n        error = new ErrorNotFound(err)\n        break\n      case notError(err):\n        error = new ErrorBadResponse('', err)\n        break\n      default:\n        error = err\n    }\n    Config.emit(uid)([uid, 'response-raw'], error)\n    return Promise.reject(error)\n  }\n\n  const onlySendPlainRes = ({ url, req }: { url: string, req: * }) => {\n    if (!req.data || !req.data.byteLength) {\n      const error = new ErrorBadResponse(url)\n      Config.emit(uid)([uid, 'response-raw'], error)\n      return Promise.reject(error)\n    }\n\n    let deserializer\n    try {\n      deserializer = new Deserialization(req.data, { mtproto: true }, uid)\n      const ctx = deserializer.typeBuffer\n      readLong(ctx, 'auth_key_id')\n      readLong(ctx, 'msg_id')\n      readInt(ctx, 'msg_len')\n    } catch (e) {\n      const error = new ErrorBadResponse(url, e)\n      Config.emit(uid)([uid, 'response-raw'], error)\n      return Promise.reject(error)\n    }\n    Config.emit(uid)([uid, 'response-raw'], {\n      data      : req.data,\n      status    : req.status,\n      statusText: req.statusText\n    })\n    return deserializer\n  }\n\n  const sendPlainReq = (url: string, requestBuffer: ArrayBuffer) =>\n    onlySendPlainReq(url, requestBuffer)\n      .then(\n        onlySendPlainRes,\n        onlySendPlainErr)\n\n  return sendPlainReq\n}\n\nexport default SendPlain\n"]}