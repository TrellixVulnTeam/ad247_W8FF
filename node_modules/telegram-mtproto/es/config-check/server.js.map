{"version":3,"sources":["../../src/config-check/server.js"],"names":["either","ErrorSet","Validator","ValidationPair","list","left","doCata","pair","obj","second","cata","Empty","of","List","makeErrorCheck","check","test","empty","error","validatorList","config","path","protocol","port","Array","isArray","dcList","checkReduce","acc","checker","chain","doValidate","validator","state","result","reduce","validate","checkFullServerConfig"],"mappings":";AAKA;AACA;AACA;AACA,OAAO,KAAKA,MAAZ,MAAwB,6BAAxB;AACA;AACA;;AAEA;;AAVA;;AAcA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,cAA9B,QAAoD,cAApD;;AAMS,cAACC,IAAD;AAAA,SAAwCJ,OAAOK,IAAP,CAAYD,IAAZ,CAAxC;AAAA;;AAFT,IAAME,SAAS,CAACC,IAAD,EAAuBC,GAAvB,KAAuCD,KAAKE,MAAL,GAAcC,IAAd,CAAmB;AACvEC,SAAO,MAAuBX,OAAOY,EAAP,CAAUJ,GAAV,CADyC;AAEvEK;AAFuE,CAAnB,CAAtD;;AAKA,IAAMC,iBACHC,KAAD,IACGP,GAAD,IACEO,MAAMC,IAAN,CAAWR,GAAX,IACIL,eAAec,KAAf,CAAqBT,GAArB,CADJ,GAEIL,eAAeS,EAAf,CAAkBJ,GAAlB,EAAuBO,MAAMG,KAAN,CAAYV,GAAZ,CAAvB,CALV;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMW,gBAAgBjB,UAAUU,EAAV,CAAa,CACxC;AACEI,QAAQI,MAAD,IAAoB,OAAOA,OAAOC,IAAd,KAAuB,QADpD;AAEEH,SAAQE,MAAD,IAAqB,sCAAqC,OAAOA,OAAOC,IAAK;AAFtF,CADwC,EAKxC;AACEL,QAAQI,MAAD,IAAoB,OAAOA,OAAOE,QAAd,KAA2B,QADxD;AAEEJ,SAAQE,MAAD,IAAqB,0CAAyC,OAAOA,OAAOE,QAAS;AAF9F,CALwC,EASxC;AACEN,QAAQI,MAAD,IAAoB,OAAOA,OAAOG,IAAd,KAAuB,QADpD;AAEEL,SAAQE,MAAD,IAAqB,sCAAqC,OAAOA,OAAOG,IAAK;AAFtF,CATwC,EAaxC;AACEP,QAAQI,MAAD,IAAoBI,MAAMC,OAAN,CAAcL,OAAOM,MAArB,CAD7B;AAEER,SAAQE,MAAD,IAAqB,uCAAsC,OAAOA,OAAOM,MAAO;AAFzF,CAbwC,CAAb,CAAtB;;AAmBP,IAAMC,cACJ,CAACC,GAAD,EAAsBC,OAAtB,KAAgDD,IAAIE,KAAJ,CAAUhB,eAAee,OAAf,CAAV,CADlD;;AAGA;AACA;;AAEA,IAAME,aAAcC,SAAD,IAChBxB,GAAD,IAAkC;AAChC,MAAMyB,QAAQ9B,eAAec,KAAf,CAAqBT,GAArB,CAAd;AACA,MAAM0B,SAASF,UAAUG,MAAV,CAAiBR,WAAjB,EAA8BM,KAA9B,CAAf;AACA,SAAO3B,OAAO4B,MAAP,EAAe1B,GAAf,CAAP;AACD,CALH;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAM4B,WAAWL,WAAWZ,aAAX,CAAjB;;AAEA,OAAO,IAAMkB,wBAAwBD,QAA9B;;AAEP,eAAeA,QAAf","file":"server.js","sourcesContent":["//@flow\n\n// import { traverse } from 'ramda'\n\nimport type { Either } from 'flow-static-land/src/Either'\n// import type { Monad } from 'flow-static-land/src/Monad'\n// import type { Tuple, TupleV } from 'flow-static-land/src/Tuple'\n// import type { Pointed } from 'flow-static-land/src/Pointed'\nimport * as either from 'flow-static-land/lib/Either'\n// import { HKT } from 'flow-static-land/lib/HKT'\n// import * as tuple from 'flow-static-land/lib/Tuple'\n\n// import Reader from 'fantasy-readers'\n\nimport type { Config, ConfigError, ErrorChecker, ConfigCheck } from './index.h'\n\nimport { ErrorSet, Validator, ValidationPair } from './error-list'\n\ntype ValidatedConfig = Either<ConfigError, Config>\n\nconst doCata = (pair: ValidationPair, obj: Config) => pair.second().cata({\n  Empty: (): ValidatedConfig => either.of(obj),\n  List : (list: ConfigError): ValidatedConfig => either.left(list)\n})\n\nconst makeErrorCheck =\n  (check: ErrorChecker) =>\n    (obj: Config): ValidationPair =>\n      check.test(obj)\n        ? ValidationPair.empty(obj)\n        : ValidationPair.of(obj, check.error(obj))\n\n// const makeRightCheck = (check: ErrorChecker) =>\n//   (eitherConfig: Either<Config, Config>): ValidationPair => {\n//     either.isRight(eitherConfig)\n//       ?\n//       :\n//     either.chain(\n//       (obj: Config): ValidationPair =>\n//         check.test(obj)\n//           ? ValidationPair.empty(either.of(obj))\n//           : ValidationPair.of(\n//             either.left(obj),\n//             check.error(obj)\n//           ),\n//       eitherConfig\n//     )\n//   }\n\nexport const validatorList = Validator.of([\n  {\n    test : (config: Config) => typeof config.path === 'string',\n    error: (config: Config) => `type of path should be string, get ${typeof config.path}`\n  },\n  {\n    test : (config: Config) => typeof config.protocol === 'string',\n    error: (config: Config) => `type of protocol should be string, get ${typeof config.protocol}`\n  },\n  {\n    test : (config: Config) => typeof config.port === 'number',\n    error: (config: Config) => `type of port should be number, get ${typeof config.port}`\n  },\n  {\n    test : (config: Config) => Array.isArray(config.dcList),\n    error: (config: Config) => `type of dcList should be array, get ${typeof config.dcList}`\n  },\n])\n\nconst checkReduce =\n  (acc: ValidationPair, checker: ErrorChecker) => acc.chain(makeErrorCheck(checker))\n\n// const checkReduceStrict =\n//   (acc: ValidationPair, checker: ErrorChecker) => acc.chain(makeRightCheck(checker))\n\nconst doValidate = (validator: Validator) =>\n  (obj: Config): ValidatedConfig => {\n    const state = ValidationPair.empty(obj)\n    const result = validator.reduce(checkReduce, state)\n    return doCata(result, obj)\n  }\n\n// const doValidateSeq = (validator: Validator) =>\n//   (obj: Config): ValidatedConfig => {\n//     const state = ValidationPair.empty(either.of(obj))\n//     const result = validator.reduce(checkReduceStrict, state)\n//     return doCata(result, obj)\n//   }\n\nconst validate = doValidate(validatorList)\n\nexport const checkFullServerConfig = validate\n\nexport default validate\n"]}