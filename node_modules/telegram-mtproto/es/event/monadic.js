
/* eslint-disable */
var methodApi = 'account.updateProfile';


/*const api: typeof Api = (list) => {
  const str0 = list[0]
  if (str0 === 'account.updateProfile') {
    return void 0
  } else {
    return (obj: Object) => ({ val: obj, ln: list.length })
  }
}
type Account = {
  name: string,
  username: string,
  age: number
}


const res = api`auth.checkPassword`({
  password_hash: [0, 2, 1]
})


const res1 = api`
auth.checkPassword
  password_hash: ${[0, 2, 1]}
`


const profileUpdater = api`
account.updateProfile
  first_name ${(user: Account) => user.name}
  about      ${({ age }: Account) => `Age: ${age}`}
`
profileUpdater({
  name: 'lambda',
  age : 5
})*/

var backtick = val => val;

var result = backtick`${methodApi}`;

import { MTError, RpcError } from '../error';
import { NetMessage } from '../service/networker/net-message';

import 'flow-static-land/src/Maybe';
import * as maybe from 'flow-static-land/src/Maybe';

import 'flow-static-land/src/Either';
import * as either from 'flow-static-land/src/Either';

import { composeKleisli } from 'flow-static-land/src/Chain';

import 'flow-static-land/src/PLens';
import * as lens from 'flow-static-land/src/PLens';

import 'flow-static-land/src/Eff';
import * as eff from 'flow-static-land/src/Eff';

import 'flow-static-land/src/Getter';
import * as getter from 'flow-static-land/src/Getter';

var netMessageMaybe = netMessage => maybe.of(netMessage);

var RequestIDLens = {
  get(netMessage) {
    return netMessage.requestID ? maybe.of(netMessage.requestID) : maybe.Nothing;
  },
  set(b, netMessage) {
    netMessage.requestID = b;
    return netMessage;
  }
};

var encaseRequestID = maybeString => composeKleisli(maybeString);

var RejectGetter = {
  get(netMessage) {
    return netMessage.deferred.reject;
  }
};

var onAuthKeyUnreg = netMessage => {
  var requestID = RequestIDLens.get(netMessage);
};

export default netMessageMaybe;
//# sourceMappingURL=monadic.js.map