//@flow

import { fromEvents } from 'kefir'
import { Property } from 'kefir'
import Bluebird from 'bluebird'
import type { AxiosPromise } from 'axios'
import type { EventEmitterType } from 'eventemitter2'

import httpClient from '../http'
import floodgate from '../util/floodgate'

import type { MTProto } from '../service/main'
import type { MTError } from '../error'

const makeDcStates = (ctx: MTProto) => {

}

type DcKey =
  'A'
  | 'B'
  | 'C'
  | 'D'
  | 'E'

type StatusType =
  'INIT'
  | 'AUTH'
  | 'WORK'
  | 'ERROR'

interface Datacenter {
  (method: string, params: { [key: string]: any }): Bluebird<any>
}

type DcStatus = Property<StatusType, MTError>

type Relay = (status: StatusType) => void



export interface RelayPool {
  pool: {
    A: Datacenter,
    B: Datacenter,
    C: Datacenter,
    D: Datacenter,
    E: Datacenter,
    home: Datacenter
  },
  status: {
    A: DcStatus,
    B: DcStatus,
    C: DcStatus,
    D: DcStatus,
    E: DcStatus,
    home: DcStatus
  },
  update: {
    A: Relay,
    B: Relay,
    C: Relay,
    D: Relay,
    E: Relay,
    home: Relay
  }
}

export interface DcJoint {
  pool: Datacenter,
  status: DcStatus,
  update: Relay,
}

type DcJointFabric = (emitter: EventEmitterType, dc: DcKey, url: string) => DcJoint

// const dcJointFabric: DcJointFabric = (emitter, dc, url) => {
//   const pool: Datacenter =
//     (method, params) =>
//       httpClient.post(
//         url,
//         data,
//         { responseType: 'arraybuffer' })

// }


