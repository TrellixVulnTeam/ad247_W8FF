{"version":3,"sources":["../../src/event/dc-state.js"],"names":["fromEvents","Property","Bluebird","httpClient","floodgate","makeDcStates","ctx"],"mappings":"AAEA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,UAArB;;;AAIA,OAAOC,UAAP,MAAuB,SAAvB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;;AAmEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAtEA,IAAMC,eAAgBC,GAAD,IAAkB,CAEtC,CAFD","file":"dc-state.js","sourcesContent":["//@flow\n\nimport { fromEvents } from 'kefir'\nimport { Property } from 'kefir'\nimport Bluebird from 'bluebird'\nimport type { AxiosPromise } from 'axios'\nimport type { EventEmitterType } from 'eventemitter2'\n\nimport httpClient from '../http'\nimport floodgate from '../util/floodgate'\n\nimport type { MTProto } from '../service/main'\nimport type { MTError } from '../error'\n\nconst makeDcStates = (ctx: MTProto) => {\n\n}\n\ntype DcKey =\n  'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n\ntype StatusType =\n  'INIT'\n  | 'AUTH'\n  | 'WORK'\n  | 'ERROR'\n\ninterface Datacenter {\n  (method: string, params: { [key: string]: any }): Bluebird<any>\n}\n\ntype DcStatus = Property<StatusType, MTError>\n\ntype Relay = (status: StatusType) => void\n\n\n\nexport interface RelayPool {\n  pool: {\n    A: Datacenter,\n    B: Datacenter,\n    C: Datacenter,\n    D: Datacenter,\n    E: Datacenter,\n    home: Datacenter\n  },\n  status: {\n    A: DcStatus,\n    B: DcStatus,\n    C: DcStatus,\n    D: DcStatus,\n    E: DcStatus,\n    home: DcStatus\n  },\n  update: {\n    A: Relay,\n    B: Relay,\n    C: Relay,\n    D: Relay,\n    E: Relay,\n    home: Relay\n  }\n}\n\nexport interface DcJoint {\n  pool: Datacenter,\n  status: DcStatus,\n  update: Relay,\n}\n\ntype DcJointFabric = (emitter: EventEmitterType, dc: DcKey, url: string) => DcJoint\n\n// const dcJointFabric: DcJointFabric = (emitter, dc, url) => {\n//   const pool: Datacenter =\n//     (method, params) =>\n//       httpClient.post(\n//         url,\n//         data,\n//         { responseType: 'arraybuffer' })\n\n// }\n\n\n"]}