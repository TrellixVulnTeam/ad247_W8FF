{"version":3,"sources":["../../../src/service/api-manager/index.h.js"],"names":[],"mappings":"AAMA,OAAkC,gBAAlC","file":"index.h.js","sourcesContent":["//@flow\n\nimport type { Emit, On } from 'eventemitter2'\nimport type { AsyncStorage } from '../../plugins'\nimport type { PublicKey } from '../main/index.h'\nimport type { NetworkerType } from '../networker'\nimport { typeof ApiManager } from '../api-manager'\n\nexport type Bytes = number[]\n\nexport type LeftOptions = {\n  dcID?: number,\n  createNetworker: ?boolean,\n}\n\nexport type Cached<Model> = {\n  [id: number]: Model\n}\n\nexport type Cache = {\n  uploader: Cached<NetworkerType>,\n  downloader: Cached<NetworkerType>,\n  auth: Cached<*>,\n  servers: Cached<string | false>,\n  keysParsed: Cached<PublicKey>,\n}\n\nexport interface ApiManagerInstance {\n  (method: string): Promise<any>,\n  (method: string, params: Object): Promise<any>,\n  (method: string, params: Object, options: LeftOptions): Promise<any>,\n  storage: AsyncStorage,\n  on: On,\n  emit: Emit,\n  bus: *,\n  api: ApiManager\n}\n\nexport type RequestOptions = {|\n  networker?: NetworkerType,\n  dc: number,\n  storage: AsyncStorage,\n  getNetworker: (dcID: number, options: LeftOptions) => Promise<NetworkerType>,\n  netOpts: { [arg: string]: * }\n|}\n\nexport type { NetworkerType } from '../networker'\n"]}