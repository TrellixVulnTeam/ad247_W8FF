function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

import Promise from 'bluebird';
// import UpdatesManager from '../updates'

import Logger from 'mtproto-logger';
var debug = Logger`api-manager`;

import Auth from '../authorizer';


import blueDefer from '../../util/defer';

import KeyManager from '../rsa-keys-manger';
import { MTError, DcUrlError } from '../../error';

import { bytesFromHex, bytesToHex } from '../../bin';

// import { switchErrors } from './error-cases'
import { delayedCall, dTime } from 'mtproto-shared';

import Request from './request';

import Config from '../../config-provider';
import NetworkerThread from '../networker';
import ApiRequest from '../main/request';
import Property from '../../property';

var baseDcID = 2;

var Ln = (length, obj) => {
  if (obj == null) return false;
  var res = typeof obj.length === 'number' && obj.length === length;
  return res;
};

export class ApiManager {
  constructor(config, uid) {
    this.cache = {
      uploader: {},
      downloader: {},
      auth: {},
      servers: {},
      keysParsed: {}
    };
    this.authPromise = blueDefer();
    this.authBegin = false;
    this.currentDc = 2;
    this.online = false;

    var {
      server,
      api,
      app: {
        storage,
        publicKeys
      }
    } = config;
    this.uid = uid;
    this.apiConfig = api;
    this.publicKeys = publicKeys;
    this.storage = storage;
    this.serverConfig = server;
    var emitter = Config.rootEmitter(this.uid);
    this.on = emitter.on;
    this.emit = emitter.emit;
    this.keyManager = KeyManager(uid, publicKeys, this.cache.keysParsed);
    this.auth = Auth(uid, this.keyManager);

    //$FlowIssue
    this.mtpInvokeApi = this.mtpInvokeApi.bind(this);
    this.invokeNetRequest = this.invokeNetRequest.bind(this);
    //$FlowIssue
    this.mtpGetNetworker = this.mtpGetNetworker.bind(this);

    var onlineProp = Property([this.uid, 'state', 'online'].join('.'), false, emitter.root);
    this.onlineProp = onlineProp;
    onlineProp.get.observe(debug`online prop`);
    onlineProp.get.drain();
    // this.updatesManager = UpdatesManager(apiManager, this.TL)
    // apiManager.updates = this.updatesManager
    emitter.on('error.303', newDc => {
      this.authBegin = false;
      this.currentDc = newDc;
    });
  }
  networkSetter(dc, authKey, serverSalt) {
    var networker = new NetworkerThread({
      appConfig: this.apiConfig,
      storage: this.storage
    }, dc, authKey, serverSalt, this.uid);
    this.cache.downloader[dc] = networker;
    return networker;
  }
  mtpGetNetworker(dcID) {
    var _this = this;

    return _asyncToGenerator(function* () {
      // const isUpload = options.fileUpload || options.fileDownload
      // const cache = isUpload
      //   ? this.cache.uploader
      //   : this.cache.downloader

      var cache = _this.cache.downloader;
      if (!dcID) throw new Error('get Networker without dcID');

      if (typeof cache[dcID] !== 'undefined') return cache[dcID];

      var akk = `dc${dcID}_auth_key`;
      var ssk = `dc${dcID}_server_salt`;

      var dcUrl = Config.dcMap(_this.uid, dcID);
      if (typeof dcUrl !== 'string') throw new DcUrlError(dcID, dcUrl);

      if (cache[dcID]) return cache[dcID];

      var authKeyHex = yield _this.storage.get(akk);
      var serverSaltHex = yield _this.storage.get(ssk);

      // if (!authKeyHex || !serverSaltHex)
      // await this.doAuth()

      if (Ln(512, authKeyHex)) {
        if (!serverSaltHex || serverSaltHex.length !== 16) serverSaltHex = 'AAAAAAAAAAAAAAAA';
        var _authKey = bytesFromHex(authKeyHex);
        var _serverSalt = bytesFromHex(serverSaltHex);

        return _this.networkSetter(dcID, _authKey, _serverSalt);
      }

      var auth = void 0;
      try {
        auth = yield _this.auth(dcID, _this.cache.auth, dcUrl);
      } catch (error) {
        return netError(error);
      }

      var { authKey, serverSalt } = auth;

      yield _this.storage.set(akk, bytesToHex(authKey));
      yield _this.storage.set(ssk, bytesToHex(serverSalt));

      _this.emit('base', 'WORK');

      return _this.networkSetter(dcID, authKey, serverSalt);
    })();
  }
  doAuth() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      _this2.authBegin = true;
      _this2.emit('base', 'AUTH');
      try {
        var storedBaseDc = yield _this2.storage.get('dc');
        var baseDc = storedBaseDc || baseDcID;
        var opts = {
          dc: baseDc,
          createNetworker: true
        };
        var networker = yield _this2.mtpGetNetworker(baseDc);
        var nearestDc = yield networker.wrapApiCall('help.getNearestDc', {}, opts);
        var { nearest_dc, this_dc } = nearestDc;
        yield _this2.storage.set('nearest_dc', nearest_dc);
        if (storedBaseDc == null) {
          yield _this2.storage.set('dc', this_dc);
          // if (nearest_dc !== this_dc) await this.mtpGetNetworker(nearest_dc, {
          //   dcID           : this_dc,
          //   createNetworker: true
          // })
        }
        debug(`nearest Dc`, ` this dc`)(nearestDc, this_dc);
        _this2.onlineProp.set(true);
        _this2.authPromise.resolve();
      } catch (err) {
        _this2.authPromise.reject(err);
      }
    })();
  }
  initConnection() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      _this3.emit('base', 'REQUEST');
      if (!isAnyNetworker(_this3)) {
        if (!_this3.authBegin) _this3.doAuth();
        yield _this3.authPromise.promise;
      }
    })();
  }
  mtpInvokeApi(method, params, options = {}) {
    var netReq = new ApiRequest({ method, params }, options);

    netReq.options.requestID = netReq.requestID;
    this.emit('new-request', netReq);

    return netReq.defer.promise;
    // this.invokeNetRequest(netReq)
  }

  invokeNetRequest(netReq) {
    var _this4 = this;

    function _ref(error) {
      var err = void 0;
      if (error instanceof Error) err = error;else {
        err = new Error();
        //$FlowIssue
        err.data = error;
      }
      // if (!error)
      //   err = { type: 'ERROR_EMPTY', input: '' }
      // else if (!is(Object, error))
      //   err = { message: error }
      // else err = error
      console.warn(`[rejectPromise] Unhandled error!`, err);

      if (!netReq.options.noErrorBox) {
        //TODO weird code. `error` changed after `.reject`?

        /*err.input = method
         err.stack =
          stack ||
          hasPath(['originalError', 'stack'], error) ||
          error.stack ||
          (new Error()).stack*/
        _this4.emit('error.invoke', error);
      }
      netReq.defer.reject(err);
    }

    return _asyncToGenerator(function* () {

      var rejectPromise = _ref;
      var networker = void 0;

      var dcID = void 0;
      try {
        yield _this4.initConnection();

        if (netReq.options.dc) {
          var reqDc = netReq.options.dc;
          if (typeof reqDc === 'number') dcID = reqDc;else if (reqDc === '@@home') dcID = yield _this4.storage.get('dc');else throw new Error(`invokeNetRequest wrong request id ${reqDc}`);
        } else dcID = yield _this4.storage.get('dc');

        networker = yield _this4.mtpGetNetworker(dcID);
      } catch (e) {
        netReq.defer.reject(e);
        return netReq.defer.promise;
      }

      var cfg = {
        networker,
        dc: dcID,
        storage: _this4.storage,
        getNetworker: _this4.mtpGetNetworker,
        netOpts: netReq.options
      };
      var req = new Request(cfg, netReq.data.method, netReq.data.params);
      // const requestThunk = (waitTime: number): Promise<any> => {
      //   debug('requestThunk', 'waitTime')(waitTime)
      //   return delayedCall(req.performRequest, +waitTime * 1e3)
      // }
      // const apiRecall = (networker: NetworkerThread) => {
      //   req.config.networker = networker
      //   return req.performRequest()
      // }
      req.performRequest().then(netReq.defer.resolve, function (error) {
        // const deferResolve = netReq.defer.resolve
        // const apiSavedNet = () => networker

        console.error(dTime(), 'Error', error.code, error.type, baseDcID, dcID);

        var noAuth = error.code === 401;
        if (noAuth) {
          debug('performRequest', 'no auth')(dcID);
          _this4.emit('no-auth', {
            dc: dcID,
            req,
            apiReq: netReq,
            error
          });
        }
        // const waitFailRegExp = /MSG_WAIT_FAILED_(\d+)/

        //   return switchErrors(
        //     error,
        //     netReq.options,
        //     dcID,
        //     baseDcID
        //   )(
        //     error,
        //     netReq.options,
        //     dcID,
        //     this.emit,
        //     rejectPromise,
        //     requestThunk,
        //     apiSavedNet,
        //     apiRecall,
        //     deferResolve,
        //     this.mtpInvokeApi,
        //     this.storage)
      }).catch(rejectPromise);

      return netReq.defer.promise;
    })();
  }

  // setUserAuth = async (dcID: number, userAuth: any) => {
  //   const fullUserAuth = { dcID, ...userAuth }
  //   await this.storage.set('dc', dcID)
  //   await this.storage.set('user_auth', fullUserAuth)
  //   this.emit('auth.dc', { dc: dcID, auth: userAuth })
  // }
}

var isAnyNetworker = ctx => Object.keys(ctx.cache.downloader).length > 0;

var netError = error => {
  console.log('Get networker error', error, error.stack);
  return Promise.reject(error);
};
//# sourceMappingURL=index.js.map