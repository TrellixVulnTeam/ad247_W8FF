function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

import { NetMessage } from '../networker/net-message';
import { TypeWriter } from '../../tl/type-buffer';
import { writeInt, writeIntBytes, writeLong } from '../../tl/writer';

export var writeInnerMessage = ({ writer, messages }) => {
  var innerMessages = [];
  var noResponseMessages = [];
  messages.forEach((msg, i) => {
    writeLong(writer, msg.msg_id, `CONTAINER[${i}][msg_id]`);
    innerMessages.push(msg.msg_id);
    writeInt(writer, msg.seq_no, `CONTAINER[${i}][seq_no]`);
    writeInt(writer, msg.body.length, `CONTAINER[${i}][bytes]`);
    writeIntBytes(writer, msg.body, false, `CONTAINER[${i}][body]`);
    if (msg.noResponse) noResponseMessages.push(msg.msg_id);
  });

  return {
    innerMessages,
    noResponseMessages
  };
};

function* _ref2({ message, url, writer }) {}

var sendRequest = (() => {
  var _ref = _asyncToGenerator(_ref2);

  return function sendRequest(_x) {
    return _ref.apply(this, arguments);
  };
})();

function* _ref4() {}

var performRequest = (() => {
  var _ref3 = _asyncToGenerator(_ref4);

  return function performRequest() {
    return _ref3.apply(this, arguments);
  };
})();

export default performRequest;
//# sourceMappingURL=perform-request.js.map