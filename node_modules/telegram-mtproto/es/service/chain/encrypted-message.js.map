{"version":3,"sources":["../../../src/service/chain/encrypted-message.js"],"names":["CryptoWorker","getMsgKeyIv","writeInt","writeIntBytes","writeLong","NetMessage","TypeWriter","Logger","log","apiMessage","ctx","serverSalt","sessionID","message","msg_id","seq_no","body","length","apiBytes","getBuffer","bytes","authKey","bytesHash","sha1Hash","msgKey","Uint8Array","subarray","aesKey","aesIv","encryptedBytes","aesEncrypt","encryptApiBytes","mtMessage","authKeyID","mtBytes","getArray"],"mappings":";;AAEA,OAAOA,YAAP,MAAyB,cAAzB;AACA,OAAOC,WAAP,MAAwB,WAAxB;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,SAAlC,QAAmD,iBAAnD;;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,UAAT,QAA2B,sBAA3B;;AAEA,OAAOC,MAAP,MAAmB,gBAAnB;;AAEA,IAAMC,MAAMD,MAAO,mBAAnB;;AAuBA,OAAO,IAAME,aAAa,CAAC,EAAEC,GAAF,EAAOC,UAAP,EAAmBC,SAAnB,EAA8BC,OAA9B,EAAD,KAA8D;AACtFV,gBAAcO,GAAd,EAAmBC,UAAnB,EAA+B,EAA/B,EAAmC,MAAnC;AACAR,gBAAcO,GAAd,EAAmBE,SAAnB,EAA8B,EAA9B,EAAkC,YAAlC;AACAR,YAAUM,GAAV,EAAeG,QAAQC,MAAvB,EAA+B,YAA/B;AACAZ,WAASQ,GAAT,EAAcG,QAAQE,MAAtB,EAA8B,QAA9B;;AAEAb,WAASQ,GAAT,EAAcG,QAAQG,IAAR,CAAaC,MAA3B,EAAmC,qBAAnC;AACAd,gBAAcO,GAAd,EAAmBG,QAAQG,IAA3B,EAAiC,KAAjC,EAAwC,cAAxC;;AAEA,MAAME,WAAWR,IAAIS,SAAJ,EAAjB;;AAEA,SAAOD,QAAP;AACD,CAZM;;AAcwB,gBAAO,EAAEE,KAAF,EAASC,OAAT,EAAP,EAAsD;AACnF,MAAMC,YAAY,MAAMtB,aAAauB,QAAb,CAAsBH,KAAtB,CAAxB;AACA,MAAMI,SAAS,IAAIC,UAAJ,CAAeH,SAAf,EAA0BI,QAA1B,CAAmC,CAAnC,EAAsC,EAAtC,CAAf;AACA,MAAM,CAACC,MAAD,EAASC,KAAT,IAAkB,MAAM3B,YAAYoB,OAAZ,EAAqBG,MAArB,EAA6B,IAA7B,CAA9B;AACA,MAAMK,iBAAiB,MAAM7B,aAAa8B,UAAb,CAAwBV,KAAxB,EAA+BO,MAA/B,EAAuCC,KAAvC,CAA7B;;AAEA,SAAO,EAAEC,cAAF,EAAkBL,MAAlB,EAAP;AACD;;AAPD,OAAO,IAAMO;AAAA;;AAAA;AAAA;AAAA;AAAA,IAAN;;AASP,OAAO,IAAMC,YAAY,CAAC,EAAEtB,GAAF,EAAOuB,SAAP,EAAkBT,MAAlB,EAA0BK,cAA1B,EAAD,KAAgE;AACvF1B,gBAAcO,GAAd,EAAmBuB,SAAnB,EAA8B,EAA9B,EAAkC,aAAlC;AACA9B,gBAAcO,GAAd,EAAmBc,MAAnB,EAA2B,GAA3B,EAAgC,SAAhC;AACArB,gBAAcO,GAAd,EAAmBmB,cAAnB,EAAmC,KAAnC,EAA0C,gBAA1C;;AAEA,MAAMK,UAAUxB,IAAIyB,QAAJ,EAAhB;;AAEA,SAAOD,OAAP;AACD,CARM","file":"encrypted-message.js","sourcesContent":["//@flow\n\nimport CryptoWorker from '../../crypto'\nimport getMsgKeyIv from './msg-key'\nimport { writeInt, writeIntBytes, writeLong } from '../../tl/writer'\n\nimport { NetMessage } from '../networker/net-message'\nimport { TypeWriter } from '../../tl/type-buffer'\n\nimport Logger from 'mtproto-logger'\n\nconst log = Logger`encrypted message`\n\n\ntype ApiMessageProps = {\n  ctx: TypeWriter,\n  serverSalt: number[],\n  sessionID: number[],\n  message: NetMessage\n}\n\ntype EncryptApiMessageProps = {\n  bytes: ArrayBuffer,\n  authKey: Uint8Array\n}\n\ntype MtMessageProps = {\n  ctx: TypeWriter,\n  authKeyID: number[],\n  msgKey: Uint8Array,\n  encryptedBytes: ArrayBuffer\n}\n\n\nexport const apiMessage = ({ ctx, serverSalt, sessionID, message }: ApiMessageProps) => {\n  writeIntBytes(ctx, serverSalt, 64, 'salt')\n  writeIntBytes(ctx, sessionID, 64, 'session_id')\n  writeLong(ctx, message.msg_id, 'message_id')\n  writeInt(ctx, message.seq_no, 'seq_no')\n\n  writeInt(ctx, message.body.length, 'message_data_length')\n  writeIntBytes(ctx, message.body, false, 'message_data')\n\n  const apiBytes = ctx.getBuffer()\n\n  return apiBytes\n}\n\nexport const encryptApiBytes = async ({ bytes, authKey }: EncryptApiMessageProps) => {\n  const bytesHash = await CryptoWorker.sha1Hash(bytes)\n  const msgKey = new Uint8Array(bytesHash).subarray(4, 20)\n  const [aesKey, aesIv] = await getMsgKeyIv(authKey, msgKey, true)\n  const encryptedBytes = await CryptoWorker.aesEncrypt(bytes, aesKey, aesIv)\n\n  return { encryptedBytes, msgKey }\n}\n\nexport const mtMessage = ({ ctx, authKeyID, msgKey, encryptedBytes }: MtMessageProps) => {\n  writeIntBytes(ctx, authKeyID, 64, 'auth_key_id')\n  writeIntBytes(ctx, msgKey, 128, 'msg_key')\n  writeIntBytes(ctx, encryptedBytes, false, 'encrypted_data')\n\n  const mtBytes = ctx.getArray()\n\n  return mtBytes\n}\n\n"]}