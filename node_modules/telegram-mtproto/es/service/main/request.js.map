{"version":3,"sources":["../../../src/service/main/request.js"],"names":["uuid","blueDefer","ApiRequest","constructor","data","options","requestID","defer"],"mappings":"AAEA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;AAOA;AACA;AACA;AACA;AACA;;AAcA,MAAMC,UAAN,CAAiB;AAIf;AAEAC,cAAYC,IAAZ,EACYC,OADZ,EACqC;AAAA,SALrCC,SAKqC,GALjBN,MAKiB;AAAA,SAJrCO,KAIqC,GAJtBN,WAIsB;;AACnC,SAAKG,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;AAVc;;AAejB,eAAeH,UAAf","file":"request.js","sourcesContent":["//@flow\n\nimport uuid from 'uuid/v4'\nimport { type Defer } from '../../util/defer'\nimport blueDefer from '../../util/defer'\n\nexport type ApiMethod = {\n  method: string,\n  params: { [arg: string]: * }\n}\n\n// type Defer = {\n//   resolve<T>(rs: T): void,\n//   reject<E>(rs: E): void,\n//   promise: Promise<*>\n// }\n\nexport type RequestStatus =\n  'wait'\n  | 'request'\n  | 'stale'\n  | 'done'\n  | 'error'\n\nexport type RequestOptions = {|\n  dc: number | '@@home',\n  requestID: string\n|}\n\nclass ApiRequest {\n  data: ApiMethod\n  requestID: string = uuid()\n  defer: Defer = blueDefer()\n  // status: RequestStatus = 'wait'\n  options: RequestOptions\n  constructor(data: ApiMethod,\n              options: RequestOptions) {\n    this.data = data\n    this.options = options\n  }\n}\n\nexport type { ApiRequest as Request }\n\nexport default ApiRequest\n"]}