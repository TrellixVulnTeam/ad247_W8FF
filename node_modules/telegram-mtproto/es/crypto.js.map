{"version":3,"sources":["../src/crypto.js"],"names":["when","is","identity","has","both","isNode","blueDefer","immediate","convertToUint8Array","sha1HashSync","sha256HashSync","aesEncryptSync","aesDecryptSync","convertToByteArray","convertToArrayBuffer","pqPrimeFactorization","bytesModPow","convertIfArray","Array","webWorker","taskID","awaiting","webCrypto","window","crypto","subtle","webkitSubtle","msCrypto","useWebCrypto","digest","useSha1Crypto","useSha256Crypto","finalizeTask","result","deferred","resolve","isCryptoTask","workerEnable","Worker","e","data","console","info","tmpWorker","error","stack","TmpWorker","require","err","onmessage","onerror","postMessage","performTaskWorker","task","params","embed","promise","sha1Hash","bytes","bytesTyped","name","then","sha256Hash","aesEncrypt","keyBytes","ivBytes","aesDecrypt","encryptedBytes","factorize","modPow","x","y","m","CryptoWorker"],"mappings":"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","file":"crypto.js","sourcesContent":["//@flow\nimport { when, is, identity, has, both } from 'ramda'\nimport isNode from 'detect-node'\n\nimport blueDefer from './util/defer'\nimport type { Defer } from './util/defer'\nimport { immediate } from 'mtproto-shared'\nimport { convertToUint8Array, sha1HashSync, sha256HashSync,\n  aesEncryptSync, aesDecryptSync, convertToByteArray, convertToArrayBuffer,\n  pqPrimeFactorization, bytesModPow } from './bin'\n\nconst convertIfArray = when(is(Array), convertToUint8Array)\nlet webWorker = !isNode\nlet taskID = 0\nconst awaiting: { [task: number]: Defer } = {}\nconst webCrypto = isNode\n  ? false\n  //eslint-disable-next-line\n  : window.crypto.subtle || window.crypto.webkitSubtle\n  //eslint-disable-next-line\n  || window.msCrypto && window.msCrypto.subtle\nconst useWebCrypto = webCrypto && !!webCrypto.digest\nlet useSha1Crypto = useWebCrypto\nlet useSha256Crypto = useWebCrypto\nconst finalizeTask = (taskID: number, result) => {\n  const deferred = awaiting[taskID]\n  if (deferred) {\n    deferred.resolve(result)\n    delete awaiting[taskID]\n  }\n}\n\nconst isCryptoTask = both(has('taskID'), has('result'))\n\n//eslint-disable-next-line\nconst workerEnable = !isNode && window.Worker\nif (workerEnable) {\n  let TmpWorker\n  try {\n    //$FlowIssue\n    TmpWorker = require('worker-loader?inline!./worker.js')\n  } catch (err) {\n    TmpWorker = require('./worker.js')\n  }\n  const tmpWorker = new TmpWorker()\n  // tmpWorker.onmessage = function(event) {\n  //   console.info('CW tmpWorker.onmessage', event && event.data)\n  // }\n  tmpWorker.onmessage = e => {\n    if (e.data === 'ready') {\n      console.info('CW ready')\n    } else if (!isCryptoTask(e.data)) {\n      console.info('Not crypto task', e, e.data)\n      return e\n    } else\n    return webWorker\n      ? finalizeTask(e.data.taskID, e.data.result)\n      : webWorker = tmpWorker\n  }\n\n  tmpWorker.onerror = function(error) {\n    console.error('CW error', error, error.stack)\n    webWorker = false\n  }\n  tmpWorker.postMessage('b')\n  webWorker = tmpWorker\n}\n\nconst performTaskWorker = (task, params, embed) => {\n  // console.log(rework_d_T(), 'CW start', task)\n  const deferred = blueDefer()\n\n  awaiting[taskID] = deferred\n\n  params.task = task\n  params.taskID = taskID\n  ;(embed || webWorker).postMessage(params)\n\n  taskID++\n\n  return deferred.promise\n}\n\nconst sha1Hash = (bytes: *) => {\n  if (useSha1Crypto) {\n    // We don't use buffer since typedArray.subarray(...).buffer gives the whole buffer and not sliced one.\n    // webCrypto.digest supports typed array\n    const bytesTyped = convertIfArray(bytes)\n    // console.log(rework_d_T(), 'Native sha1 start')\n    return webCrypto.digest({ name: 'SHA-1' }, bytesTyped).then(digest =>\n      // console.log(rework_d_T(), 'Native sha1 done')\n        digest, e => {\n      console.error('Crypto digest error', e)\n      useSha1Crypto = false\n      return sha1HashSync(bytes)\n    })\n  }\n  return immediate(sha1HashSync, bytes)\n}\n\nconst sha256Hash = (bytes: *) => {\n  if (useSha256Crypto) {\n    const bytesTyped = convertIfArray(bytes)\n    // console.log(rework_d_T(), 'Native sha1 start')\n    return webCrypto.digest({ name: 'SHA-256' }, bytesTyped)\n      .then(identity\n        // console.log(rework_d_T(), 'Native sha1 done')\n        , e => {\n          console.error('Crypto digest error', e)\n          useSha256Crypto = false\n          return sha256HashSync(bytes)\n        })\n  }\n  return immediate(sha256HashSync, bytes)\n}\n\nconst aesEncrypt = (bytes: *, keyBytes: *, ivBytes: *): Promise<ArrayBuffer> =>\n  immediate(() => convertToArrayBuffer(aesEncryptSync(bytes, keyBytes, ivBytes)))\n\nconst aesDecrypt = (encryptedBytes: *, keyBytes: *, ivBytes: *): Promise<ArrayBuffer> =>\n  immediate(() => convertToArrayBuffer(\n    aesDecryptSync(encryptedBytes, keyBytes, ivBytes)))\n\nconst factorize = (bytes: number[] | Uint8Array) => {\n  bytes = convertToByteArray(bytes)\n  return webWorker\n    ? performTaskWorker('factorize', { bytes })\n    : immediate(pqPrimeFactorization, bytes)\n}\n\nconst modPow = (x: number[] | Uint8Array,\n                y: number[] | Uint8Array,\n                m: number[] | Uint8Array): Promise<number[]> =>\nwebWorker\n  ? performTaskWorker('mod-pow', {\n    x,\n    y,\n    m\n  })\n  : immediate(bytesModPow, x, y, m)\n\nexport const CryptoWorker = {\n  sha1Hash,\n  sha256Hash,\n  aesEncrypt,\n  aesDecrypt,\n  factorize,\n  modPow\n}\n\nexport default CryptoWorker"]}