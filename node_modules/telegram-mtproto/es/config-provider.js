import uuid from 'uuid/v4';
// import isNode from 'detect-node'

import { ProviderRegistryError } from './error';
import './tl/index.h';
import 'eventemitter2';
import Layout from './layout';
import cryptoCommon from './co-worker/common-provider';
import getCrypto from './co-worker';

var provider = {};

var common = Object.assign({}, cryptoCommon);

var Config = {
  signIn: {
    get: uid => getConfig(uid).signIn,
    set(uid, value) {
      getConfig(uid).signIn = value;
    }
  },
  rootEmitter: uid => getConfig(uid).rootEmitter,
  emit: uid => getConfig(uid).emit,
  layer: {
    apiLayer: uid => getConfig(uid).layer.apiLayer,
    mtLayer: uid => getConfig(uid).layer.mtLayer
  },
  schema: {
    get: uid => getConfig(uid).schema,
    apiSchema: uid => getConfig(uid).schema.apiSchema,
    mtSchema: uid => getConfig(uid).schema.mtSchema
  },
  timerOffset: {
    get: uid => getConfig(uid).timerOffset,
    set(uid, value) {
      getConfig(uid).timerOffset = value;
    }
  },
  lastMessageID: {
    get: uid => getConfig(uid).lastMessageID,
    set(uid, value) {
      getConfig(uid).lastMessageID = value;
    }
  },
  dcMap(uid, id) {
    var dc = getConfig(uid).dcMap.get(id);
    if (typeof dc !== 'string') throw new Error(`Wrong dc id! ${id}`);
    return dc;
  },
  common
};

Config.common.Crypto = getCrypto(Config.common);

export function getConfig(uid) {
  var config = provider[uid];
  if (config == null) throw new ProviderRegistryError(uid);
  return config;
}

var innerRegistrator = (config, uid) => {
  var fullConfig = Object.assign({}, config, {
    uid,
    timerOffset: 0,
    lastMessageID: [0, 0]
  });
  provider[uid] = fullConfig;
  return uid;
};

export var curriedRegister = () => {
  var uid = uuid();
  return {
    uid,
    next: config => innerRegistrator(config, uid)
  };
};

export function registerInstance(config) {
  var uid = uuid();

  innerRegistrator(config, uid);
  return uid;
}

export default Config;
//# sourceMappingURL=config-provider.js.map